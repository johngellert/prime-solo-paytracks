{"version":3,"sources":["components/LoginPage/400dpiLogoCropped.png","components/NavDrawer/small-logo.png","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/businessReducer.js","redux/reducers/employeesReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/businessSaga.js","redux/sagas/employeeSaga.js","redux/sagas/paymentSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/InfoPage/InfoPage.js","components/UserPage/UserPage.js","components/CheckRequiredFields/CheckRequiredFields.js","components/AddBusiness/AddBusiness.js","components/AddEmployee/AddEmployee.js","components/DatePickers/DatePickers.js","components/NetPayCalculation/NetPayCalculation.js","components/PaymentForm/PaymentForm.js","components/Dashboard/Dashboard.js","components/HomePage/HomePage.js","components/EmployeeInformation/EmployeeInformation.js","components/EmployeesPage/EmployeesPage.js","components/NavDrawer/NavDrawer.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","businessReducer","singleBusiness","employeesReducer","rootReducer","errors","user","business","employees","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","_config","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","id","userSaga_marked","userSaga_marked2","addBusiness","fetchBusinesses","fetchSingleBusiness","businessSaga","userId","businessSaga_marked","businessResponse","concat","businessSaga_marked2","businessSaga_marked3","_context4","_marked4","addEmployee","fetchEmployees","updateEmployee","deleteEmployee","employeeSaga","employeeSaga_marked","employeesResponse","employeeSaga_marked2","employeeSaga_marked3","delete","employeeSaga_marked4","_context5","_marked5","postPayment","paymentSaga_marked","paymentSaga_marked2","rootSaga","all","paymentSaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","react_router_dom","to","Fragment","components_LogOutButton_LogOutButton","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","_this2","this","classes","role","onSubmit","logo","src","smallLogo","TextField","textField","name","label","variant","onChange","Button","loginButton","color","white-space","Component","withStyles","theme","marginLeft","spacing","marginRight","marginBottom","width","height","marginTop","RegisterPage","htmlFor","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","react_router","assign","AboutPage","InfoPage","CheckRequiredFields","arrayOfFields","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","field","err","return","AddBusiness","businessName","serviceType","employerIdentificationNumber","stateTaxId","streetAddress","city","zipCode","mobilePhone","alternatePhone","email","handleChangeInput","handleClickCancel","history","push","handleClickSave","checkRequiredFields","objectSpread","Swal","fire","title","alert","AddEmployee","firstName","lastName","emailAddress","assignedBusiness","payPeriodFrequency","isTaxable","federalAllowances","stateAllowances","maritalStatus","employerPaysEmployeesFica","handleChangeSwitchTaxable","handleChangeSwitchFica","handleClickAddSampleEmployee","required","FormControl","selectField","InputLabel","shrink","Select","input","Input","map","eachBusiness","MenuItem","key","menu","disabled","isEdit","switch","Switch","checked","defaultValue","size","container","display","flexWrap","dense","useStyles","makeStyles","DatePickers","noValidate","customLabel","handleChangeDate","InputLabelProps","NetPayCalculation","stateWithholding","grossWages","payPeriods","socialSecurityMedicare","netPay","federalWithholding","employeesSocialSecurityMedicare","PaymentFrom","selectedEmployee","employersSocialSecurityMedicare","isCash","checkNumber","periodStart","periodEnd","paymentDate","currentDate","handleExpansion","employee","handleChangeGrossWages","Number","replace","handleGrossWagesSubmit","paymentCalculator","handleChangeSwitchCash","handleChangeCheckNumberInput","handleClickPay","getCurrentDate","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","property","eachEmployee","root","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","column","Typography","heading","secondaryHeading","Divider","ExpansionPanelDetails","details","react_currency_input_es","thousandSeparator","decimalSeparator","precision","prefix","allowNegative","allowEmpty","onChangeEvent","toFixed","placeholder","helper","ExpansionPanelActions","fontSize","typography","pxToRem","palette","text","secondary","icon","verticalAlign","alignItems","flexBasis","borderLeft","divider","padding","unit","link","primary","main","textDecoration","&:hover","flexGrow","paper","mixins","gutters","paddingTop","paddingBottom","Grid","item","xs","Paper","elevation","JSON","stringify","HomePage","labelWidth","handleAddBusiness","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","formControl","ref","autoWidth","OutlinedInput","business_id","PaymentForm_PaymentForm","employee_id","margin","minWidth","EmployeeInformation","handleClickEdit","handleClickDelete","employeeBusinessID","EmployeesPage","handleClickAddEmployee","handleSaveEmployee","components_EmployeeInformation_EmployeeInformation","position","backgroundColor","background","boxShadow","shadows","outline","NavDrawer","open","handleDrawerOpen","handleDrawerClose","_classNames3","_classNames4","_this$props","CssBaseline","AppBar","classNames","appBar","appBarShift","Toolbar","disableGutters","IconButton","aria-label","menuButton","hide","Menu_default","navLogo","alt","Drawer","drawer","drawerOpen","drawerClose","toolbar","direction","ChevronRight_default","ChevronLeft_default","List","ListItem","button","ListItemIcon","Home_default","ListItemText","People_default","ExitToApp_default","zIndex","transition","transitions","create","easing","sharp","duration","leavingScreen","enteringScreen","flexShrink","whiteSpace","overflowX","breakpoints","up","justifyContent","content","withTheme","createMuiTheme","error","App","MuiThemeProvider","components_NavDrawer_NavDrawer","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","es","components_App_App","document","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,saCqCzBC,sBAAgB,CAC7BC,aAlCmB,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAC5B,QAD2CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC5BC,MACb,IAAK,oBACH,MAAO,GACT,IAAK,oBACH,MAAO,oCACT,IAAK,eACH,MAAO,2DACT,IAAK,uBACH,MAAO,qDACT,QACE,OAAOJ,IAwBXK,oBAlB0B,WAAwB,IAAvBL,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GACnC,QADkDA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACnCC,MACb,IAAK,2BACH,MAAO,GACT,IAAK,2BACH,MAAO,kCACT,IAAK,sBACH,MAAO,0EACT,QACE,OAAOJ,OCjBIM,EAbC,WAA6B,IAA5BN,EAA4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,QACvB,QAD2CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC5BC,MACb,IAAK,oBACH,MAAO,QACT,IAAK,uBACH,MAAO,WACT,QACE,OAAOJ,ICMAO,EAbK,WAAwB,IAAvBP,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIO,EAAWP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAAQK,EAAOJ,MACb,IAAK,WACH,OAAOI,EAAOC,QAChB,IAAK,aACH,MAAO,GACT,QACE,OAAOT,ICaEF,cAAgB,CAC7BY,gBAnBsB,WAAwB,IAAvBV,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIO,EAAWP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQK,EAAOJ,MACb,IAAK,eACH,OAAOI,EAAOC,QAChB,QACE,OAAOT,IAeXW,eAXqB,WAAwB,IAAvBX,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIO,EAAWP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,OAAQK,EAAOJ,MACb,IAAK,sBACH,OAAOI,EAAOC,QAChB,QACE,OAAOT,MCLEF,cAAgB,CAC7Bc,iBAVuB,WAAwB,IAAvBZ,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIO,EAAWP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQK,EAAOJ,MACb,IAAK,gBACH,OAAOI,EAAOC,QAChB,QACE,OAAOT,MCcEa,EARKf,YAAgB,CAClCgB,SACAR,YACAS,OACAC,WACAC,kECdQC,cAkCAC,cAuBAC,GAzDV,SAAUF,EAAUV,GAApB,IAAAa,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGI,OAHJF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGUC,YAAI,CAAExB,KAAM,sBAHtB,OAaI,OARMiB,EAAS,CACbQ,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAPvBN,EAAAE,KAAA,EAaUK,IAAMC,KAAK,kBAAmBzB,EAAOC,QAASY,GAbxD,OAiBI,OAjBJI,EAAAE,KAAA,EAiBUC,YAAI,CAACxB,KAAM,eAjBrB,OAAAqB,EAAAE,KAAA,oBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAmBIU,QAAQC,IAAI,yBAAZX,EAAAS,IAC8B,MAA1BT,EAAAS,GAAMG,SAASC,OApBvB,CAAAb,EAAAE,KAAA,SAwBM,OAxBNF,EAAAE,KAAA,GAwBYC,YAAI,CAAExB,KAAM,iBAxBxB,QAAAqB,EAAAE,KAAA,iBA4BM,OA5BNF,EAAAE,KAAA,GA4BYC,YAAI,CAAExB,KAAM,yBA5BxB,yBAAAqB,EAAAc,SAAAC,EAAA,eAkCA,SAAUrB,EAAWX,GAArB,IAAAiC,EAAA,OAAAnB,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAWI,OAXJe,EAAAhB,KAAA,EAEUL,EAAS,CACbQ,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAJvBW,EAAAf,KAAA,EAWUK,IAAMC,KAAK,mBAAoBZ,GAXzC,OAgBI,OAhBJqB,EAAAf,KAAA,EAgBUC,YAAI,CAAExB,KAAM,eAhBtB,OAAAsC,EAAAf,KAAA,gBAAAe,EAAAhB,KAAA,EAAAgB,EAAAR,GAAAQ,EAAA,SAmBIP,QAAQC,IAAI,0BAAZM,EAAAR,IAnBJ,yBAAAQ,EAAAH,SAAAI,EAAA,cAuBA,SAAUvB,IAAV,OAAAE,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACE,OADFiB,EAAAjB,KAAA,EACQkB,YAAW,QAAS3B,GAD5B,OAEE,OAFF0B,EAAAjB,KAAA,EAEQkB,YAAW,SAAU1B,GAF7B,wBAAAyB,EAAAL,SAAAO,GAKe1B,mBC9DL2B,cAoBAC,GApBV,SAAUD,EAAavC,GAAvB,OAAAc,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGI,OAHJF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGUC,YAAI,CAAExB,KAAM,6BAHtB,OAMI,OANJqB,EAAAE,KAAA,EAMUK,IAAMC,KAAK,qBAAsBzB,EAAOC,SANlD,OASI,OATJgB,EAAAE,KAAA,EASUC,YAAI,CAAExB,KAAM,QAASK,QAASD,EAAOC,UAT/C,OAaI,OAbJgB,EAAAE,KAAA,EAaUC,YAAI,CAACxB,KAAM,sBAbrB,OAAAqB,EAAAE,KAAA,iBAgBM,OAhBNF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAeMU,QAAQC,IAAI,gCAAZX,EAAAS,IAfNT,EAAAE,KAAA,GAgBYC,YAAI,CAACxB,KAAM,wBAhBvB,yBAAAqB,EAAAc,SAAAU,EAAA,eAoBA,SAAUD,IAAV,OAAA1B,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACE,OADFe,EAAAf,KAAA,EACQkB,YAAW,WAAYE,GAD/B,wBAAAL,EAAAH,SAAAW,GAIeF,mBCxBLG,cAuBAC,GAvBV,SAAUD,IAAV,IAAA9B,EAAAgB,EAAA,OAAAf,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAWqB,OAXrBF,EAAAC,KAAA,EAEUL,EAAS,CACbQ,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAJvBN,EAAAE,KAAA,EAW2BK,IAAMqB,IAAI,YAAahC,GAXlD,OAgBI,OALMgB,EAXVZ,EAAA6B,KAAA7B,EAAAE,KAAA,EAgBUC,YAAI,CAAExB,KAAM,WAAYK,QAAS4B,EAASkB,OAhBpD,OAiBI,OAjBJ9B,EAAAE,KAAA,EAiBUC,YAAI,CAAExB,KAAM,mBAAoBK,QAAS4B,EAASkB,KAAKC,KAjBjE,OAAA/B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAmBIU,QAAQC,IAAI,0BAAZX,EAAAS,IAnBJ,yBAAAT,EAAAc,SAAAkB,EAAA,eAuBA,SAAUL,IAAV,OAAA9B,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACE,OADFe,EAAAf,KAAA,EACQkB,YAAW,aAAcM,GADjC,wBAAAT,EAAAH,SAAAmB,GAIeN,mBC5BLO,cAYAC,cAmBAC,cAUAC,GAzCV,SAAUH,EAAYnD,GAAtB,OAAAc,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIQ,OAJRF,EAAAC,KAAA,EAEQS,QAAQC,IAAI,qBACZD,QAAQC,IAAI5B,EAAOC,SAH3BgB,EAAAE,KAAA,EAIcK,IAAMC,KAAK,eAAgBzB,EAAOC,SAJhD,OAKQ,OALRgB,EAAAE,KAAA,EAKcC,YAAI,CAACxB,KAAM,mBAAoBK,QAASD,EAAOC,QAAQsD,SALrE,OAAAtC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAOQU,QAAQC,IAAI,8BAAZX,EAAAS,IAPR,yBAAAT,EAAAc,SAAAyB,EAAA,cAYA,SAAUJ,EAAgBpD,GAA1B,IAAAyD,EAAA,OAAA3C,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAIiC,OAJjCe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAIuCK,IAAMqB,IAAN,oBAAAa,OAA8B1D,EAAOC,UAJ5E,OAMQ,OAFMwD,EAJdvB,EAAAY,KAAAZ,EAAAf,KAAA,EAMcC,YAAI,CAAExB,KAAM,eAAgBK,QAASwD,EAAiBV,OANpE,UAO6C,IAAjCU,EAAiBV,KAAKrD,OAPlC,CAAAwC,EAAAf,KAAA,QASY,OATZe,EAAAf,KAAA,EASkBC,YAAI,CAACxB,KAAM,wBAAyBK,QAASwD,EAAiBV,KAAK,KATrF,OAWQ,OAXRb,EAAAf,KAAA,GAWcC,YAAI,CAACxB,KAAK,kBAAmBK,QAASD,EAAOC,UAX3D,QAAAiC,EAAAf,KAAA,iBAAAe,EAAAhB,KAAA,GAAAgB,EAAAR,GAAAQ,EAAA,SAaQP,QAAQC,IAAI,kCAAZM,EAAAR,IAbR,yBAAAQ,EAAAH,SAAA4B,EAAA,eAmBA,SAAUN,EAAoBrD,GAA9B,OAAAc,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEQ,OAFRiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEcC,YAAI,CAACxB,KAAM,sBAAuBK,QAASD,EAAOC,UAFhE,OAAAmC,EAAAjB,KAAA,eAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAIQT,QAAQC,IAAI,sCAAZQ,EAAAV,IAJR,wBAAAU,EAAAL,SAAA6B,EAAA,cAUA,SAAUN,IAAV,OAAAxC,EAAAC,EAAAC,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,OACI,OADJ0C,EAAA1C,KAAA,EACUkB,YAAW,yBAA0Bc,GAD/C,OAEI,OAFJU,EAAA1C,KAAA,EAEUkB,YAAW,mBAAoBe,GAFzC,OAGI,OAHJS,EAAA1C,KAAA,EAGUkB,YAAW,wBAAyBgB,GAH9C,wBAAAQ,EAAA9B,SAAA+B,GAMeR,mBC/CLS,cAYAC,cAaAC,eAaAC,eAUAC,IAhDV,SAAUJ,EAAY/D,GAAtB,OAAAc,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIQ,OAJRF,EAAAC,KAAA,EAEQS,QAAQC,IAAI,qBACZD,QAAQC,IAAI5B,EAAOC,SAH3BgB,EAAAE,KAAA,EAIcK,IAAMC,KAAK,eAAgBzB,EAAOC,SAJhD,OAAAgB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAOQU,QAAQC,IAAI,8BAAZX,EAAAS,IAPR,yBAAAT,EAAAc,SAAAqC,EAAA,cAYA,SAAUJ,EAAehE,GAAzB,IAAAqE,EAAA,OAAAvD,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAIkC,OAJlCe,EAAAhB,KAAA,EAEQS,QAAQC,IAAI,uBACZD,QAAQC,IAAI5B,EAAOC,SAH3BiC,EAAAf,KAAA,EAIwCK,IAAMqB,IAAN,mBAAAa,OAA6B1D,EAAOC,UAJ5E,OAMQ,OAFMoE,EAJdnC,EAAAY,KAKQnB,QAAQC,IAAIyC,EAAkBtB,MALtCb,EAAAf,KAAA,EAMcC,YAAK,CAACxB,KAAI,gBAAmBK,QAASoE,EAAkBtB,OANtE,OAAAb,EAAAf,KAAA,iBAAAe,EAAAhB,KAAA,GAAAgB,EAAAR,GAAAQ,EAAA,SAQQP,QAAQC,IAAI,iCAAZM,EAAAR,IARR,yBAAAQ,EAAAH,SAAAuC,EAAA,eAaA,SAAUL,GAAejE,GAAzB,OAAAc,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAIQ,OAJRiB,EAAAlB,KAAA,EAEQS,QAAQC,IAAI,uBACZD,QAAQC,IAAI5B,EAAOC,SAH3BmC,EAAAjB,KAAA,EAIcK,IAAMJ,IAAN,eAA0BpB,EAAOC,SAJ/C,OAKQ,OALRmC,EAAAjB,KAAA,EAKcC,YAAK,CAACxB,KAAI,oBALxB,OAAAwC,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAOQT,QAAQC,IAAI,uCAAZQ,EAAAV,IAPR,yBAAAU,EAAAL,SAAAwC,EAAA,cAaA,SAAUL,GAAelE,GAAzB,OAAAc,EAAAC,EAAAC,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,OAEQ,OAFR0C,EAAA3C,KAAA,EAAA2C,EAAA1C,KAAA,EAEcK,IAAMgD,OAAN,gBAAAd,OAA6B1D,EAAOC,UAFlD,OAGQ,OAHR4D,EAAA1C,KAAA,EAGcC,YAAK,CAACxB,KAAI,oBAHxB,OAAAiE,EAAA1C,KAAA,gBAAA0C,EAAA3C,KAAA,EAAA2C,EAAAnC,GAAAmC,EAAA,SAKQlC,QAAQC,IAAI,uCAAZiC,EAAAnC,IALR,yBAAAmC,EAAA9B,SAAA0C,EAAA,cAUA,SAAUN,KAAV,OAAArD,EAAAC,EAAAC,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,OACI,OADJuD,EAAAvD,KAAA,EACUkB,YAAW,yBAA0B0B,GAD/C,OAEI,OAFJW,EAAAvD,KAAA,EAEUkB,YAAW,kBAAmB2B,GAFxC,OAGI,OAHJU,EAAAvD,KAAA,EAGUkB,YAAW,kBAAmB4B,IAHxC,OAII,OAJJS,EAAAvD,KAAA,EAIUkB,YAAW,kBAAmB6B,IAJxC,wBAAAQ,EAAA3C,SAAA4C,GAOeR,sBCrDLS,gBAWAT,IAXV,SAAUS,GAAY5E,GAAtB,OAAAc,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIQ,OAJRF,EAAAC,KAAA,EAEQS,QAAQC,IAAI,qBACZD,QAAQC,IAAI5B,EAAOC,SAH3BgB,EAAAE,KAAA,EAIcK,IAAMC,KAAK,cAAezB,EAAOC,SAJ/C,OAKQ0B,QAAQC,IAAI,kBALpBX,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAOQU,QAAQC,IAAI,8BAAZX,EAAAS,IAPR,yBAAAT,EAAAc,SAAA8C,GAAA,cAWA,SAAUV,KAAV,OAAArD,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACI,OADJe,EAAAf,KAAA,EACUkB,YAAW,sBAAuBuC,IAD5C,wBAAA1C,EAAAH,SAAA+C,IAIeX,sBCLUY,IAAV,SAAUA,KAAV,OAAAjE,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACP6D,YAAI,CACRpE,IACA4B,IACAI,IACAU,IACAa,KACAc,OAPW,wBAAAhE,EAAAc,SAAAmD,uECIAC,iBAhBM,SAAAC,GAAK,OACxBC,EAAAtE,EAAAuE,cAAA,UAIEC,UAAWH,EAAMG,UACjBC,QAAS,kBAAMJ,EAAMK,SAAS,CAAE7F,KAAM,aALxC,wBCsDauF,YALS,SAAA3F,GAAK,MAAK,CAChCe,KAAMf,EAAMe,KACZC,SAAUhB,EAAMgB,SAASN,kBAGZiF,CApDH,SAACC,GAAD,OACVC,EAAAtE,EAAAuE,cAAA,OAAKC,UAAU,OACbF,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMC,GAAG,SACPN,EAAAtE,EAAAuE,cAAA,MAAIC,UAAU,aAAd,uBAEFF,EAAAtE,EAAAuE,cAAA,OAAKC,UAAU,aACbF,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,SAI3BP,EAAM7E,KAAKyC,GAAK,OAAS,oBAG3BoC,EAAM7E,KAAKyC,IACVqC,EAAAtE,EAAAuE,cAAAD,EAAAtE,EAAA6E,SAAA,KAIEP,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,iBAA9B,gBAGAN,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,sBAA9B,gBAI0B,IAAzBP,EAAM5E,SAASd,QAChB2F,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,0BAA9B,gBAIAN,EAAAtE,EAAAuE,cAACO,GAAD,CAAcN,UAAU,cAK5BF,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,UAA9B,+FCRAG,iNACJtG,MAAQ,CACNuG,SAAU,GACVC,SAAU,MAGZC,MAAQ,SAACC,GACPA,EAAMC,iBAEFC,EAAK5G,MAAMuG,UAAYK,EAAK5G,MAAMwG,SACpCI,EAAKhB,MAAMK,SAAS,CAClB7F,KAAM,QACNK,QAAS,CACP8F,SAAUK,EAAK5G,MAAMuG,SACrBC,SAAUI,EAAK5G,MAAMwG,YAIzBI,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,yBAIhCyG,qBAAuB,SAAAC,GAAY,OAAI,SAACJ,GACtCE,EAAKG,SAALC,OAAAC,GAAA,EAAAD,CAAA,GACGF,EAAeJ,EAAMQ,OAAOC,oFAIxB,IAAAC,EAAAC,KACCC,EAAYD,KAAKzB,MAAjB0B,QACR,OACEzB,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,wBACL6D,KAAKzB,MAAM9E,OAAOf,cACjB8F,EAAAtE,EAAAuE,cAAA,MACEC,UAAU,QACVwB,KAAK,SAEJF,KAAKzB,MAAM9E,OAAOf,cAGvB8F,EAAAtE,EAAAuE,cAAA,QAAM0B,SAAUH,KAAKZ,MAAOjD,GAAG,cAC7BqC,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQG,KAAMC,IAAKC,OACnC9B,EAAAtE,EAAAuE,cAAA,mBACAD,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CACE7B,UAAWuB,EAAQO,UACnBzH,KAAK,OACL0H,KAAK,WACLC,MAAM,WACNC,QAAQ,WACRb,MAAOE,KAAKrH,MAAMuG,SAClB0B,SAAUZ,KAAKR,qBAAqB,eAIxChB,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CACE7B,UAAWuB,EAAQO,UACnBzH,KAAK,WACL0H,KAAK,WACLC,MAAM,WACNC,QAAQ,WACRb,MAAOE,KAAKrH,MAAMwG,SAClByB,SAAUZ,KAAKR,qBAAqB,eAIxChB,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CAGEnC,UAAWuB,EAAQa,YACnB/H,KAAK,SACL0H,KAAK,SACLX,MAAM,SACNiB,MAAM,YACNJ,QAAQ,aARV,UAaFnC,EAAAtE,EAAAuE,cAAA,UAASuC,cAAa,OACpBxC,EAAAtE,EAAAuE,cAAA,UACE1F,KAAK,SACL2F,UAAU,cACVC,QAAS,WAAQoB,EAAKxB,MAAMK,SAAS,CAAE7F,KAAM,2BAH/C,YAOAyF,EAAAtE,EAAAuE,cAAA,qBAzFYwC,aAmHT3C,eAJS,SAAA3F,GAAK,MAAK,CAChCc,OAAQd,EAAMc,SAGD6E,CAAyB4C,aA3IzB,SAAAC,GAAK,MAAK,CAKvBX,UAAW,CACTY,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAETV,YAAa,CACXM,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAETpB,KAAM,CACJqB,OAAQ,GACRC,UAAW,GACXH,aAAc,MAuHsBL,CAAmBjC,KCjJrD0C,iNACJhJ,MAAQ,CACNuG,SAAU,GACVC,SAAU,MAGZzD,aAAe,SAAC2D,GACdA,EAAMC,iBAEFC,EAAK5G,MAAMuG,UAAYK,EAAK5G,MAAMwG,SACpCI,EAAKhB,MAAMK,SAAS,CAClB7F,KAAM,WACNK,QAAS,CACP8F,SAAUK,EAAK5G,MAAMuG,SACrBC,SAAUI,EAAK5G,MAAMwG,YAIzBI,EAAKhB,MAAMK,SAAS,CAAC7F,KAAM,gCAI/ByG,qBAAuB,SAAAC,GAAY,OAAI,SAACJ,GACtCE,EAAKG,SAALC,OAAAC,GAAA,EAAAD,CAAA,GACGF,EAAeJ,EAAMQ,OAAOC,oFAIxB,IAAAC,EAAAC,KACP,OACExB,EAAAtE,EAAAuE,cAAA,WACGuB,KAAKzB,MAAM9E,OAAOT,qBACjBwF,EAAAtE,EAAAuE,cAAA,MACEC,UAAU,QACVwB,KAAK,SAEJF,KAAKzB,MAAM9E,OAAOT,qBAGvBwF,EAAAtE,EAAAuE,cAAA,QAAM0B,SAAUH,KAAKtE,cACnB8C,EAAAtE,EAAAuE,cAAA,2BACAD,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,SAAOmD,QAAQ,YAAf,YAEEpD,EAAAtE,EAAAuE,cAAA,SACE1F,KAAK,OACL0H,KAAK,WACLX,MAAOE,KAAKrH,MAAMuG,SAClB0B,SAAUZ,KAAKR,qBAAqB,gBAI1ChB,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,SAAOmD,QAAQ,YAAf,YAEEpD,EAAAtE,EAAAuE,cAAA,SACE1F,KAAK,WACL0H,KAAK,WACLX,MAAOE,KAAKrH,MAAMwG,SAClByB,SAAUZ,KAAKR,qBAAqB,gBAI1ChB,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,SACEC,UAAU,WACV3F,KAAK,SACL0H,KAAK,SACLX,MAAM,eAIZtB,EAAAtE,EAAAuE,cAAA,cACED,EAAAtE,EAAAuE,cAAA,UACE1F,KAAK,SACL2F,UAAU,cACVC,QAAS,WAAOoB,EAAKxB,MAAMK,SAAS,CAAC7F,KAAM,wBAH7C,kBAzEiBkI,aA6FZ3C,eAJS,SAAA3F,GAAK,MAAK,CAChCc,OAAQd,EAAMc,SAGD6E,CAAyBqD,IC/BzBrD,eAPS,SAAC3F,GACvB,MAAO,CACLe,KAAMf,EAAMe,KACZT,UAAWN,EAAMM,YAINqF,CAjDQ,SAACC,GAAU,IAW5BsD,EANSC,EAITvD,EAJFwD,UACArI,EAGE6E,EAHF7E,KACAT,EAEEsF,EAFFtF,UACG+I,EAR2BrC,OAAAsC,GAAA,EAAAtC,CAS5BpB,EAT4B,kCA4BhC,OAZEsD,EAHCnI,EAAKyC,GAGY2F,EACK,UAAd7I,EAGSgG,GAIA0C,GAKhBnD,EAAAtE,EAAAuE,cAACyD,GAAA,EAADvC,OAAAwC,OAAA,GAGMH,EAHN,CAIED,UAAWF,OChCJO,GAVG,kBAChB5D,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,sDCKS4D,ICWA/D,YALS,SAAA3F,GAAK,MAAK,CAChCe,KAAMf,EAAMe,OAIC4E,CAlBE,SAACC,GAAD,OACbC,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,MAAItC,GAAG,WAAP,YACYoC,EAAM7E,KAAKwF,SADvB,KAGAV,EAAAtE,EAAAuE,cAAA,wBAAgBF,EAAM7E,KAAKyC,IAC3BqC,EAAAtE,EAAAuE,cAACO,GAAD,CAAcN,UAAU,cDPb,kBACfF,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,+DERY6D,GAAA,SAACC,GACb,IAAIC,EAAQ,EADmBC,GAAA,EAAAC,GAAA,EAAAC,OAAA7J,EAAA,IAE/B,QAAA8J,EAAAC,EAAmBN,EAAnBO,OAAAC,cAAAN,GAAAG,EAAAC,EAAAvI,QAAA0I,MAAAP,GAAA,EAAkC,KAAxBQ,EAAwBL,EAAA9C,MAChB,OAAVmD,GAA4B,KAAVA,IAClBT,GAAQ,IAJe,MAAAU,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GAO/B,OAAc,IAAVH,GCKFY,iNAEFzK,MAAQ,CACJ0K,aAAc,KACdC,YAAa,KACbC,6BAA8B,KAC9BC,WAAY,KACZC,cAAe,KACfC,KAAM,KACN/K,MAAO,KACPgL,QAAQ,KACRC,YAAa,KACbC,eAAgB,KAChBC,MAAO,QAGXC,kBAAoB,SAACtE,GAAD,OAAkB,SAACJ,GACnCE,EAAKG,SAALC,OAAAC,GAAA,EAAAD,CAAA,GACKF,EAAeJ,EAAMQ,OAAOC,YAIrCkE,kBAAoB,WAChBzE,EAAKG,SAAU,CACX2D,aAAc,GACdE,6BAA8B,GAC9BC,WAAY,GACZC,cAAe,GACfC,KAAM,GACN/K,MAAO,GACPgL,QAAS,GACTC,YAAa,GACbC,eAAgB,GAChBP,YAAa,GACbQ,MAAO,KAEXvE,EAAKhB,MAAM0F,QAAQC,KAAK,YAI5BC,gBAAkB,WACVC,GAAoB,CAAC7E,EAAK5G,MAAM0K,aAAc9D,EAAK5G,MAAM2K,YAAa/D,EAAK5G,MAAMmL,SACjFvE,EAAKhB,MAAMK,SAAS,CAAC7F,KAAM,yBAA0BK,QAAQuG,OAAA0E,GAAA,EAAA1E,CAAA,GAAKJ,EAAK5G,MAAX,CAAkB+D,OAAQ6C,EAAKhB,MAAM7E,KAAKyC,OACtGoD,EAAKhB,MAAM0F,QAAQC,KAAK,SACxBI,KAAKC,KAAK,CACNxL,KAAM,UACNyL,MAAO,qBAIXC,MAAM,gKAKV,OACIjG,EAAAtE,EAAAuE,cAAA,OAAKC,UAAU,qBACXF,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAA,oCACAD,EAAAtE,EAAAuE,cAAA,SAAQC,UAAU,kBAAlB,gBAEAF,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,mBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,oDAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,mCAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,4BAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,iBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,8BAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,oBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,oBAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,WAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,qBAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,YAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,wBAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,cAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,4BAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,kBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,+BAEAD,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,qBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,SAAOC,UAAU,kBAAjB,eAEAF,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,kBAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,SAAOC,UAAU,kBAAjB,gBAEAF,EAAAtE,EAAAuE,cAAA,SAAOmC,SAAUZ,KAAK+D,kBAAkB,YAExCvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,UAAQE,QAASqB,KAAKgE,mBAAtB,UACAxF,EAAAtE,EAAAuE,cAAA,UAAQE,QAASqB,KAAKmE,iBAAtB,iBAnHMlD,aAiIX3C,eALS,SAAA3F,GAAK,MAAK,CAC9Be,KAAMf,EAAMe,KACZf,UAGW2F,CAAyB8E,gEChFlCsB,yNAEF/L,MAAQ,CACJgM,UAAW,GACXC,SAAU,GACVnB,cAAe,KACfC,KAAM,KACN/K,MAAO,KACPgL,QAAS,KACTC,YAAa,GACbC,eAAgB,KAChBgB,aAAc,GACdC,iBAAkB,GAClBC,mBAAoB,GACpBC,WAAW,EACXC,kBAAmB,GACnBC,gBAAiB,GACjBC,cAAe,GACfC,2BAA2B,KAG/BrB,kBAAoB,SAACtE,GAAD,OAAkB,SAACJ,GACnCE,EAAKG,SAALC,OAAAC,GAAA,EAAAD,CAAA,GACKF,EAAeJ,EAAMQ,OAAOC,YAIrCuF,0BAA4B,WAGpB9F,EAAK5G,MAAMqM,UACXzF,EAAKG,SAAS,CACVsF,WAAYzF,EAAK5G,MAAMqM,UACvBI,2BAA2B,EAC3BH,kBAAmB,GACnBC,gBAAiB,GACjBC,cAAe,KAGnB5F,EAAKG,SAAS,CACVsF,WAAYzF,EAAK5G,MAAMqM,eAKnCM,uBAAyB,WACrB/F,EAAKG,SAAS,CACV0F,2BAA4B7F,EAAK5G,MAAMyM,+BAK/CpB,kBAAoB,WAChBzE,EAAKG,SAAS,CACViF,UAAW,GACXC,SAAU,GACVnB,cAAe,KACfC,KAAM,KACN/K,MAAO,KACPgL,QAAS,KACTC,YAAa,GACbC,eAAgB,KAChBgB,aAAc,GACdC,iBAAkB,GAClBC,mBAAoB,GACpBC,WAAW,EACXC,kBAAmB,GACnBC,gBAAiB,GACjBC,cAAe,GACfC,2BAA2B,IAE/B7F,EAAKhB,MAAM0F,QAAQC,KAAK,YAI5BC,gBAAkB,WACV5E,EAAK5G,MAAMqM,UACPZ,GAAoB,CACpB7E,EAAK5G,MAAMgM,UACXpF,EAAK5G,MAAMiM,SACXrF,EAAK5G,MAAMiL,YACXrE,EAAK5G,MAAMkM,aACXtF,EAAK5G,MAAMmM,iBACXvF,EAAK5G,MAAMoM,mBACXxF,EAAK5G,MAAMsM,kBACX1F,EAAK5G,MAAMuM,gBACX3F,EAAK5G,MAAMwM,iBAGX5F,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,yBAA0BK,QAAQuG,OAAA0E,GAAA,EAAA1E,CAAA,GAAMJ,EAAK5G,MAAZ,CAAmB+D,OAAQ6C,EAAKhB,MAAM7E,KAAKyC,OACxGoD,EAAKhB,MAAM0F,QAAQC,KAAK,UAExBO,MAAM,sFAINL,GAAoB,CACpB7E,EAAK5G,MAAMgM,UACXpF,EAAK5G,MAAMiM,SACXrF,EAAK5G,MAAMiL,YACXrE,EAAK5G,MAAMkM,aACXtF,EAAK5G,MAAMmM,iBACXvF,EAAK5G,MAAMoM,sBAGXxF,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,yBAA0BK,QAAQuG,OAAA0E,GAAA,EAAA1E,CAAA,GAAMJ,EAAK5G,MAAZ,CAAmB+D,OAAQ6C,EAAKhB,MAAM7E,KAAKyC,OACxGoD,EAAKhB,MAAM0F,QAAQC,KAAK,UAExBO,MAAM,sFAIdH,KAAKC,KAAK,CACNxL,KAAM,UACNyL,MAAO,uBAIfe,6BAA+B,WAC3BhG,EAAKG,SAAS,CACViF,UAAW,QACXC,SAAU,WACVnB,cAAe,kBACfC,KAAM,cACN/K,MAAO,KACPgL,QAAS,QACTC,YAAa,aACbC,eAAgB,KAChBgB,aAAc,2BACdC,iBAAkB,GAClBC,mBAAoB,GACpBC,WAAW,EACXC,kBAAmB,GACnBC,gBAAiB,GACjBC,cAAe,GACfC,2BAA2B,+EAM1B,IAEGnF,EAAYD,KAAKzB,MAAjB0B,QAER,OACIzB,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,qBAEJqC,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAA,MAAIE,QAASqB,KAAKuF,8BAAlB,iBAEA/G,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,UAAQ,EAAC1F,MAAOE,KAAKrH,MAAMgM,UAAWjG,UAAWuB,EAAQO,UAAWE,MAAM,aAAaE,SAAUZ,KAAK+D,kBAAkB,eACnIvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,UAAQ,EAAC1F,MAAOE,KAAKrH,MAAMiM,SAAUlG,UAAWuB,EAAQO,UAAWE,MAAM,YAAYE,SAAUZ,KAAK+D,kBAAkB,cACjIvF,EAAAtE,EAAAuE,cAAA,6BACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWT,MAAOE,KAAKrH,MAAM8K,cAAe/E,UAAWuB,EAAQO,UAAWE,MAAM,iBAAiBE,SAAUZ,KAAK+D,kBAAkB,mBAClIvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWT,MAAOE,KAAKrH,MAAM+K,KAAMhF,UAAWuB,EAAQO,UAAWE,MAAM,OAAOE,SAAUZ,KAAK+D,kBAAkB,UAC/GvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWT,MAAOE,KAAKrH,MAAMA,MAAO+F,UAAWuB,EAAQO,UAAWE,MAAM,QAAQE,SAAUZ,KAAK+D,kBAAkB,WACjHvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWT,MAAOE,KAAKrH,MAAMgL,QAASjF,UAAWuB,EAAQO,UAAWE,MAAM,WAAWE,SAAUZ,KAAK+D,kBAAkB,aACtHvF,EAAAtE,EAAAuE,cAAA,iCACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,UAAQ,EAAC1F,MAAOE,KAAKrH,MAAMiL,YAAalF,UAAWuB,EAAQO,UAAWE,MAAM,eAAeE,SAAUZ,KAAK+D,kBAAkB,iBACvIvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWT,MAAOE,KAAKrH,MAAMkL,eAAgBnF,UAAWuB,EAAQO,UAAWE,MAAM,kBAAkBE,SAAUZ,KAAK+D,kBAAkB,oBACpIvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,UAAQ,EAAC1F,MAAOE,KAAKrH,MAAMkM,aAAcnG,UAAWuB,EAAQO,UAAWE,MAAM,gBAAgBE,SAAUZ,KAAK+D,kBAAkB,kBACzIvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,oCACAD,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQyF,aAC5BlH,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,0BAApC,sBAGApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACIL,UAAQ,EACRM,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,mBAAmBtE,GAAG,2BACzC2D,MAAOE,KAAKrH,MAAMmM,iBAClBlE,SAAUZ,KAAK+D,kBAAkB,oBACjCtD,KAAM,oBAE0B,IAA/BT,KAAKzB,MAAM5E,SAASd,QACjBmH,KAAKzB,MAAM5E,SAASqM,IAAI,SAAAC,GACpB,OAAOzH,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CACHC,IAAKF,EAAa9J,GAClB2D,MAAOmG,EAAa9J,GACpBuC,UAAWuB,EAAQmG,MAElBH,EAAa5C,kBAKlC7E,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQyF,aAC5BlH,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,8BAApC,wBAGApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACIQ,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCR,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,uBAAuBtE,GAAG,+BAC7C2D,MAAOE,KAAKrH,MAAMoM,mBAClBnE,SAAUZ,KAAK+D,kBAAkB,sBACjCtD,KAAK,wBAELjC,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,IAAKpB,UAAWuB,EAAQmG,MAAzC,oBACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,oBACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,6BACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,2BACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,4BAGR5H,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQsG,QAC5B/H,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,oBAApC,eAGApD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAMqM,UACRxG,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACI5F,SAAUZ,KAAKqF,0BACftE,MAAM,YACN+E,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,aAAatE,GAAG,qBACnCsK,SAAO,IALf,IAMQ,OAGRjI,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIH,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzC1F,SAAUZ,KAAKqF,0BACftE,MAAM,YACN+E,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,aAAatE,GAAG,uBACpC,OAIfqC,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAMqM,WACRxG,EAAAtE,EAAAuE,cAAAD,EAAAtE,EAAA6E,SAAA,KACIP,EAAAtE,EAAAuE,cAAA,8CACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,SAAUxF,KAAKrH,MAAMqM,UAAW0B,aAAc1G,KAAKrH,MAAMsM,kBAAmBvG,UAAWuB,EAAQO,UAAWE,MAAM,qBAAqBE,SAAUZ,KAAK+D,kBAAkB,uBACjLvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAWiF,SAAUxF,KAAKrH,MAAMqM,UAAW0B,aAAc1G,KAAKrH,MAAMuM,gBAAiBxG,UAAWuB,EAAQO,UAAWE,MAAM,mBAAmBE,SAAUZ,KAAK+D,kBAAkB,qBAC7KvF,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQyF,aAC5BlH,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,wBAApC,kBAGApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACIC,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,iBAAiBtE,GAAG,yBACvCkK,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAMqM,UACrBlF,MAAO,GACPc,SAAUZ,KAAK+D,kBAAkB,kBAEjCvF,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAM,UAAhB,UACAtB,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAM,WAAhB,aAGRtB,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQsG,QAC5B/H,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,cAApC,4CAGApD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAMyM,0BACR5G,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIC,SAAO,EACPJ,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAMqM,UACrBpE,SAAUZ,KAAKsF,uBACfQ,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,OAAOtE,GAAG,iBANrC,IAOQ,OAGRqC,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIH,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAMqM,UACrBpE,SAAUZ,KAAKsF,uBACfQ,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,OAAOtE,GAAG,iBALrC,IAMQ,QAMxBqC,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACI8F,KAAK,QACLhG,QAAQ,WACRI,MAAM,UACNpC,QAASqB,KAAKgE,mBAJlB,UAQAxF,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAKmE,iBAJlB,iBAnSMlD,cA4TX3C,eALS,SAAA3F,GAAK,MAAK,CAC9Be,KAAMf,EAAMe,KACZC,SAAUhB,EAAMgB,SAASN,kBAGdiF,CAAyB4C,aA3VzB,SAAAC,GAAK,MAAK,CACrByF,UAAW,CACPC,QAAS,OACTC,SAAU,QAEdtG,UAAW,CACPY,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEXkE,YAAa,CACTtE,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEX+E,OAAQ,CACJnF,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEXuF,MAAO,CACHrF,UAAW,IAEf0E,KAAM,CACF5E,MAAO,OAgUyBN,CAAmBwD,sJCtXrDsC,GAAYC,aAAW,SAAA9F,GAAK,MAAK,CACrCyF,UAAW,CACTC,QAAS,OACTC,SAAU,QAEZtG,UAAW,CACTY,WAAYD,EAAME,QAAQ,GAC1BC,YAAaH,EAAME,QAAQ,GAC3BG,MAAO,QAII,SAAS0F,GAAY3I,GAClC,IAAM0B,EAAU+G,KAEhB,OACExI,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQ2G,UAAW7F,MAAM,YAAYoG,YAAU,GAC7D3I,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CACEpE,GAAG,OACHuE,MAAOnC,EAAM6I,YACbxG,SAAUrC,EAAM8I,iBAChBtO,KAAK,OACL2N,aAAcnI,EAAMmI,aACpBhI,UAAWuB,EAAQO,UACnB8G,gBAAiB,CACf1B,QAAQ,MCpBlB,IA+Ge2B,GAAA,CAAEC,iBA/GQ,SAACC,EAAYC,EAAYxC,EAAiBC,GAqB/D,IAAIrF,EAAS2H,EAAaC,EAAgC,KAAlBxC,EAExC,GAAsB,WAAlBC,EAA4B,CAC5B,GAAIrF,GAAS,MAAQA,EAAQ,MAKzB,OAJAA,GAAS,KACTA,GAAS,MACTA,GAAS4H,EAIR,GAAI5H,GAAS,OAASA,EAAQ,MAM/B,OALAA,GAAS,MACTA,GAAS,MACTA,GAAS,QACTA,GAAS4H,EAIR,GAAI5H,GAAS,OAASA,EAAQ,OAM/B,OALAA,GAAS,MACTA,GAAS,MACTA,GAAS,QACTA,GAAS4H,EAIR,GAAI5H,GAAS,OAMd,OALAA,GAAS,OACTA,GAAS,MACTA,GAAS,SACTA,GAAS4H,OAMZ,GAAsB,YAAlBvC,EAA6B,CAClC,GAAIrF,GAAS,MAAQA,EAAQ,MAKzB,OAJAA,GAAS,KACTA,GAAS,MACTA,GAAS4H,EAIR,GAAI5H,GAAS,OAASA,EAAQ,OAM/B,OALAA,GAAS,MACTA,GAAS,MACTA,GAAS,OACTA,GAAS4H,EAIR,GAAI5H,GAAS,QAAUA,EAAQ,OAMhC,OALAA,GAAS,OACTA,GAAS,MACTA,GAAS,SACTA,GAAS4H,EAIR,GAAI5H,GAAS,OAMd,OALAA,GAAS,OACTA,GAAS,MACTA,GAAS,SACTA,GAAS4H,IA0BcC,uBAXJ,SAACF,GAAD,MAA6B,MAAbA,GAWYG,OAT5C,SAACH,EAAYD,EAAkBK,EAAoBC,EAAiC1C,GAC/F,OAAIA,EACSqC,EAAaD,EAAoBK,EAEhCJ,EAAaD,EAAoBK,EAAsBC,ICnDnEC,yNAEFpP,MAAQ,CACJqP,iBAAkB,GAClBP,WAAY,EACZD,iBAAkB,EAClBK,mBAAoB,EACpBC,gCAAiC,EACjCG,gCAAiC,EACjCL,OAAQ,EACRM,QAAQ,EACRC,YAAa,GACbC,YAAa,GACbC,UAAW,GACXC,YAAa,GACbC,YAAa,MAOjBC,gBAAkB,SAACC,GACflJ,EAAKG,SAALC,OAAA0E,GAAA,EAAA1E,CAAA,GACOJ,EAAK5G,MADZ,CAEIqP,iBAAkBS,QAK1BC,uBAAyB,SAACrJ,GACtBE,EAAKG,SAALC,OAAA0E,GAAA,EAAA1E,CAAA,GACOJ,EAAK5G,MADZ,CAEI8O,WAAYkB,OAAOtJ,EAAMQ,OAAOC,MAAM8I,QAAQ,aAAc,WAIpEC,uBAAyB,WACjBtJ,EAAK5G,MAAMqP,iBAAiBhD,UAC5BzF,EAAKG,SAAS,CACV8H,iBAAkBsB,GAAkBtB,iBAChCjI,EAAK5G,MAAM8O,WACXlI,EAAK5G,MAAMqP,iBAAiBjD,mBAC5BxF,EAAK5G,MAAMqP,iBAAiB9C,gBAC5B3F,EAAK5G,MAAMqP,iBAAiB7C,eAEhC2C,gCAAiCgB,GAAkBnB,uBAC/CpI,EAAK5G,MAAM8O,YAEfQ,gCAAiCa,GAAkBnB,uBAC/CpI,EAAK5G,MAAM8O,aAGf,WAEI,OAAOlI,EAAKG,SAAS,CACjBkI,OAAQkB,GAAkBlB,OACtBrI,EAAK5G,MAAM8O,WACXlI,EAAK5G,MAAM6O,iBACXjI,EAAK5G,MAAMkP,mBACXtI,EAAK5G,MAAMmP,gCACXvI,EAAK5G,MAAMqP,iBAAiB5C,+BAM5C7F,EAAKG,SAAS,CACVkI,OAAQrI,EAAK5G,MAAM8O,gBAM/BsB,uBAAyB,WACrBxJ,EAAKG,SAAS,CACVwI,QAAS3I,EAAK5G,MAAMuP,YAI5Bc,6BAA+B,SAAC3J,GAC5BE,EAAKG,SAAS,CACVyI,YAAa9I,EAAMQ,OAAOC,WAIlCmJ,eAAiB,WACbnO,QAAQC,IAAIwE,EAAK5G,OAEjB4G,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,sBAAuBK,QAASmG,EAAK5G,QACjE4G,EAAKyE,oBACLM,KAAKC,KAAK,CACNxL,KAAM,UACNyL,MAAO,yBAIfR,kBAAoB,WAChBzE,EAAKG,SAALC,OAAA0E,GAAA,EAAA1E,CAAA,GACOJ,EAAK5G,MADZ,CAEI8O,WAAY,EACZD,iBAAkB,EAClBK,mBAAoB,EACpBC,gCAAiC,EACjCG,gCAAiC,EACjCL,OAAQ,EACRM,QAAQ,EACRC,YAAa,GACbC,YAAa,GACbC,UAAW,GACXC,YAAa,GACbC,YAAa,SAKrBW,eAAiB,WACb,IAAIC,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cACjBT,EAAQQ,EAAO,IAAMF,EAAK,IAAMJ,EAEhC9J,EAAKG,SAALC,OAAA0E,GAAA,EAAA1E,CAAA,GACOJ,EAAK5G,MADZ,CAEI4P,YAAaY,QAIrB9B,iBAAmB,SAACwC,GAAD,OAAc,SAACxK,GAC9BE,EAAKG,SAALC,OAAA0E,GAAA,EAAA1E,CAAA,GACOJ,EAAK5G,MADZgH,OAAAC,GAAA,EAAAD,CAAA,GAEKkK,EAAWxK,EAAMQ,OAAOC,iGAjH7BE,KAAKkJ,kDAqHA,IAAAnJ,EAAAC,KACC8J,EAAe9J,KAAKzB,MAAMuL,aACxB7J,EAAYD,KAAKzB,MAAjB0B,QAER,OACIzB,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQ8J,MACpBvL,EAAAtE,EAAAuE,cAACuL,GAAA,EAAD,CAAgBpJ,SAAU,kBAAMb,EAAKyI,gBAAgBsB,KACjDtL,EAAAtE,EAAAuE,cAACwL,GAAA,EAAD,CACIC,WAAY1L,EAAAtE,EAAAuE,cAAC0L,GAAAjQ,EAAD,MACZkQ,gBAAc,kBACdjO,GAAG,kBAEHqC,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQoK,QACpB7L,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAY5L,UAAWuB,EAAQsK,SAAUT,EAAanF,UAAY,IAAMmF,EAAalF,WAGzFpG,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQoK,QACpB7L,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAY5L,UAAWuB,EAAQuK,kBAAmBV,EAAa9E,UAAa,UAAa,iBAGjGxG,EAAAtE,EAAAuE,cAACgM,GAAA,EAAD,MACAjM,EAAAtE,EAAAuE,cAACiM,GAAA,EAAD,CAAuBhM,UAAWuB,EAAQ0K,SACtCnM,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQoK,QACpB7L,EAAAtE,EAAAuE,cAAA,QACIC,UAAU,kBACVyB,SAAUH,KAAK6I,wBACfrK,EAAAtE,EAAAuE,cAAA,0BAEAD,EAAAtE,EAAAuE,cAAA,WAEID,EAAAtE,EAAAuE,cAACmM,GAAA,EAAD,CACIzO,GAAG,iBACH0O,kBAAkB,IAClBC,iBAAiB,IACjBC,UAAU,IACVC,OAAO,IACPC,eAAe,EACfC,YAAY,EACZpL,MAAOE,KAAKrH,MAAM8O,WAClB0D,cAAenL,KAAK0I,0BAI5BlK,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAK6I,wBAJlB,kBAQJrK,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,yBACcuB,KAAKrH,MAAMiP,OAAS,EAC1B,IAAM5H,KAAKrH,MAAMiP,OAAOwD,QAAQ,GAAGxC,QAAQ,0BAA2B,OACtE,SAERpK,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,aACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CAAQ5F,SAAUZ,KAAK+I,yBACtB/I,KAAKrH,MAAMuP,OAAU,OAAU,SAGpC1J,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,aACID,EAAAtE,EAAAuE,cAAA,SACI4H,WAAUrG,KAAKrH,MAAMuP,OACrBxJ,UAAWsB,KAAKrH,MAAMuP,OAAU,eAAkB,gBAClDmD,YAAY,UACZvL,MAAOE,KAAKrH,MAAMwP,YAClBvH,SAAUZ,KAAKgJ,gCAIvBxK,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,aACID,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WACID,EAAAtE,EAAAuE,cAACyI,GAAD,CAAaR,aAAc1G,KAAKrH,MAAMyP,YAAaf,iBAAkBrH,KAAKqH,iBAAiB,eAAgBD,YAAY,kBAE3H5I,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WACID,EAAAtE,EAAAuE,cAACyI,GAAD,CAAaR,aAAc1G,KAAKrH,MAAM0P,UAAWhB,iBAAkBrH,KAAKqH,iBAAiB,aAAcD,YAAY,gBAEvH5I,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WAEID,EAAAtE,EAAAuE,cAACyI,GAAD,CAAaR,aAAc1G,KAAKrH,MAAM4P,YAAalB,iBAAkBrH,KAAKqH,iBAAiB,eAAgBD,YAAY,kBAG3H5I,EAAAtE,EAAAuE,cAAA,aAIRD,EAAAtE,EAAAuE,cAAA,OAAKuC,cAAY,MAAMtC,UAAWuB,EAAQqL,QACtC9M,EAAAtE,EAAAuE,cAAA,yBACAD,EAAAtE,EAAAuE,cAAA,qBAA6C,IAAhCuB,KAAKrH,MAAM6O,kBAA0BxH,KAAKrH,MAAM6O,iBAAiB4D,QAAQ,IAAM,GAC5F5M,EAAAtE,EAAAuE,cAAA,uBAAiD,IAAlCuB,KAAKrH,MAAMkP,oBAA4B7H,KAAKrH,MAAMkP,mBAAmBuD,QAAQ,IAAM,GAClG5M,EAAAtE,EAAAuE,cAAA,6BAAoE,IAA/CuB,KAAKrH,MAAMmP,iCAAyC9H,KAAKrH,MAAMmP,gCAAgCsD,QAAQ,IAAM,GAClI5M,EAAAtE,EAAAuE,cAAA,6BAAoE,IAA/CuB,KAAKrH,MAAMsP,iCAAyCjI,KAAKrH,MAAMsP,gCAAgCmD,QAAQ,IAAM,KAG1I5M,EAAAtE,EAAAuE,cAAC8M,GAAA,EAAD,KACI/M,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACI8F,KAAK,QACLhG,QAAQ,WACRI,MAAM,UACNpC,QAASqB,KAAKgE,mBAJlB,UAQAxF,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAKiJ,gBAJlB,iBAvPEhI,cAkRX3C,iBAAU4C,aArTV,SAAAC,GAAK,MAAK,CACrB4I,KAAM,CACFvI,MAAO,QAEX+I,QAAS,CACLiB,SAAUrK,EAAMsK,WAAWC,QAAQ,KAEvClB,iBAAkB,CACdgB,SAAUrK,EAAMsK,WAAWC,QAAQ,IACnC3K,MAAOI,EAAMwK,QAAQC,KAAKC,WAE9BC,KAAM,CACFC,cAAe,SACftK,OAAQ,GACRD,MAAO,IAEXmJ,QAAS,CACLqB,WAAY,UAEhB3B,OAAQ,CACJ4B,UAAW,UAEfX,OAAQ,CACJY,WAAU,aAAArP,OAAesE,EAAMwK,QAAQQ,SACvCC,QAAO,GAAAvP,OAAKsE,EAAME,QAAQgL,KAAnB,OAAAxP,OAA6BsE,EAAME,QAAQ,GAA3C,OAEXiL,KAAM,CACFvL,MAAOI,EAAMwK,QAAQY,QAAQC,KAC7BC,eAAgB,OAChBC,UAAW,CACPD,eAAgB,gBAuRHvL,CAAmB6G,yBCnQ7BzJ,cAAU4C,aArEV,SAAAC,GAAK,MAAK,CACrB4I,KAAM,CACF4C,SAAU,GAEdC,MAAMjN,OAAA0E,GAAA,EAAA1E,CAAA,GACCwB,EAAM0L,OAAOC,UADf,CAEDC,WAAY5L,EAAME,QAAQ,GAC1B2L,cAAe7L,EAAME,QAAQ,GAC7BI,OAAQ,QA6DSP,CAtDzB,SAAmB3C,GAAO,IAChB0B,EAAY1B,EAAZ0B,QAER,OACEzB,EAAAtE,EAAAuE,cAAA,WACGD,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMrG,WAAS,EAAClI,UAAWuB,EAAQ8J,KAAM1I,QAAS,GAC7C7C,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX3O,EAAAtE,EAAAuE,cAAC2O,GAAA,EAAD,CAAO1O,UAAWuB,EAAQ2M,MAAOS,UAAW,GACxC7O,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAY3J,QAAQ,KAAKoB,UAAU,MAAnC,6BAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,YAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,UAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,mCAKRvD,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX3O,EAAAtE,EAAAuE,cAAC2O,GAAA,EAAD,CAAO1O,UAAWuB,EAAQ2M,MAAOS,UAAW,GACxC7O,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAY3J,QAAQ,KAAKoB,UAAU,MAAnC,gCAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,eAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,iCAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,qCAGAvD,EAAAtE,EAAAuE,cAAC6L,GAAA,EAAD,CAAYvI,UAAU,KAAtB,sCAMZvD,EAAAtE,EAAAuE,cAAA,WACK6O,KAAKC,UAAUhP,EAAO,KAAM,QAW1BD,IC5BTkP,iNAEJ7U,MAAQ,CAEN0K,aAAc,GACdoK,WAAY,KAed1J,kBAAoB,SAAC1E,GAEnBE,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,wBAAyBK,QAASiG,EAAMQ,OAAOC,QAC3EP,EAAKG,SAAS,CACZ2D,aAAchE,EAAMQ,OAAOC,MAAMuD,kBAIrCqK,kBAAoB,WAClBnO,EAAKhB,MAAM0F,QAAQC,KAAK,4GAjBxBlE,KAAKzB,MAAMK,SAAS,CAAE7F,KAAM,mBAAoBK,QAAS4G,KAAKzB,MAAM7E,KAAKyC,KAEzE6D,KAAKN,SAAS,CACZ+N,WAAYE,IAASC,YAAY5N,KAAK6N,eAAeC,+CAiBhD,IAAA/N,EAAAC,KACCC,EAAYD,KAAKzB,MAAjB0B,QAER,OACEzB,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,aAONqC,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,6BACNqC,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,mBACNqC,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa9E,QAAQ,WAAWjC,UAAWuB,EAAQ8N,aACjDvP,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CACEqI,IAAK,SAAAA,GACHjO,EAAK8N,cAAgBG,GAEvBpM,QAAQ,0BAJV,mBAMApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACE/F,MAAOE,KAAKrH,MAAM0K,aAClBzC,SAAUZ,KAAK+D,kBACfkK,WAAS,EACTnI,MACEtH,EAAAtE,EAAAuE,cAACyP,GAAA,EAAD,CACET,WAAYzN,KAAKrH,MAAM8U,WACvBhN,KAAK,gBACLtE,GAAG,4BAGPqC,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAM,IAAGtB,EAAAtE,EAAAuE,cAAA,mBACa,IAA/BuB,KAAKzB,MAAM5E,SAASd,QACnBmH,KAAKzB,MAAM5E,SAASqM,IAAI,SAAAC,GACtB,OAAOzH,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CACLC,IAAKF,EAAa9J,GAClB2D,MAAOmG,GAENA,EAAa5C,kBAKxB7E,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAK0N,mBAJlB,gBAQAlP,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,kBACNqC,EAAAtE,EAAAuE,cAAA,UAAKuB,KAAKrH,MAAM0K,iBAItB7E,EAAAtE,EAAAuE,cAAA,WAEAD,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,uBACNqC,EAAAtE,EAAAuE,cAAA,0BACiC,IAAhCuB,KAAKzB,MAAM3E,UAAUf,QACpBmH,KAAKzB,MAAM3E,UAAUoM,IAAI,SAAA8D,GACvB,GAAIA,EAAaqE,cAAgBpO,EAAKxB,MAAMjF,eAAe6C,GACzD,OAAOqC,EAAAtE,EAAAuE,cAAC2P,GAAD,CAAajI,IAAK2D,EAAauE,YAAavE,aAAcA,eAjG1D7I,aAiIR3C,eATS,SAAA3F,GAAK,MAAK,CAChCe,KAAMf,EAAMe,KACZC,SAAUhB,EAAMgB,SAASN,gBACzBC,eAAgBX,EAAMgB,SAASL,eAC/BM,UAAWjB,EAAMiB,UAAUL,iBAC3BZ,UAIa2F,CAAyB4C,aAhKzB,SAAAC,GAAK,MAAK,CAgBvB4M,YAAa,CACX3M,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,UACpBiN,OAAQnN,EAAME,UACdkN,SAAU,OA2I0BrN,CAAmBsM,KCxHrDgB,gOAEF7V,MAAQ,CACJ8P,SAAU,CACN4F,YAAa9O,EAAKhB,MAAMuL,aAAauE,YACrCF,YAAa5O,EAAKhB,MAAMuL,aAAaqE,YACrCxJ,UAAWpF,EAAKhB,MAAMuL,aAAanF,UACnCC,SAAUrF,EAAKhB,MAAMuL,aAAalF,SAClCnB,cAAelE,EAAKhB,MAAMuL,aAAarG,cACvCC,KAAMnE,EAAKhB,MAAMuL,aAAapG,KAC9B/K,MAAO4G,EAAKhB,MAAMuL,aAAanR,MAC/BgL,QAASpE,EAAKhB,MAAMuL,aAAanG,QACjCC,YAAarE,EAAKhB,MAAMuL,aAAalG,YACrCC,eAAgBtE,EAAKhB,MAAMuL,aAAajG,eACxCgB,aAActF,EAAKhB,MAAMuL,aAAajF,aACtCxB,aAAc9D,EAAKhB,MAAMuL,aAAazG,aACtC0B,mBAAoBxF,EAAKhB,MAAMuL,aAAa/E,mBAC5CC,UAAWzF,EAAKhB,MAAMuL,aAAa9E,UACnCC,kBAAmB1F,EAAKhB,MAAMuL,aAAa7E,kBAC3CC,gBAAiB3F,EAAKhB,MAAMuL,aAAa5E,gBACzCC,cAAe5F,EAAKhB,MAAMuL,aAAa3E,cACvCC,0BAA2B7F,EAAKhB,MAAMuL,aAAa1E,2BAGvDkB,QAAQ,KAGZmI,gBAAkB,WACdlP,EAAKG,SAAS,CACV4G,QAAQ,OAGhBvC,kBAAoB,SAACtE,GAAD,OAAkB,SAACJ,GACnCE,EAAKG,SAAS,CACV+I,SAAS9I,OAAA0E,GAAA,EAAA1E,CAAA,GACFJ,EAAK5G,MAAM8P,SADV9I,OAAAC,GAAA,EAAAD,CAAA,GAEHF,EAAeJ,EAAMQ,OAAOC,cAKzCuF,0BAA4B,WAGpB9F,EAAK5G,MAAM8P,SAASzD,UACpBzF,EAAKG,SAAS,CACV+I,SAAS9I,OAAA0E,GAAA,EAAA1E,CAAA,GACFJ,EAAK5G,MAAM8P,SADV,CAEJzD,WAAYzF,EAAK5G,MAAM8P,SAASzD,UAChCI,2BAA2B,EAC3BH,kBAAmB,EACnBC,gBAAiB,EACjBC,cAAe,SAIvB5F,EAAKG,SAAS,CACV+I,SAAS9I,OAAA0E,GAAA,EAAA1E,CAAA,GACFJ,EAAK5G,MAAM8P,SADV,CAEJzD,WAAYzF,EAAK5G,MAAM8P,SAASzD,iBAMhDM,uBAAyB,WACrB/F,EAAKG,SAAS,CACV+I,SAAS9I,OAAA0E,GAAA,EAAA1E,CAAA,GACFJ,EAAK5G,MAAM8P,SADV,CAEJrD,2BAA4B7F,EAAK5G,MAAM8P,SAASrD,iCAM5DpB,kBAAoB,WAChBlJ,QAAQC,IAAI,kBACZwE,EAAKG,SAAS,CACV+I,SAAU,CACN4F,YAAa9O,EAAKhB,MAAMuL,aAAauE,YACrCF,YAAa5O,EAAKhB,MAAMuL,aAAaqE,YACrCxJ,UAAWpF,EAAKhB,MAAMuL,aAAanF,UACnCC,SAAUrF,EAAKhB,MAAMuL,aAAalF,SAClCnB,cAAelE,EAAKhB,MAAMuL,aAAarG,cACvCC,KAAMnE,EAAKhB,MAAMuL,aAAapG,KAC9B/K,MAAO4G,EAAKhB,MAAMuL,aAAanR,MAC/BgL,QAASpE,EAAKhB,MAAMuL,aAAanG,QACjCC,YAAarE,EAAKhB,MAAMuL,aAAalG,YACrCC,eAAgBtE,EAAKhB,MAAMuL,aAAajG,eACxCgB,aAActF,EAAKhB,MAAMuL,aAAajF,aACtCxB,aAAc9D,EAAKhB,MAAMuL,aAAazG,aACtC0B,mBAAoBxF,EAAKhB,MAAMuL,aAAa/E,mBAC5CC,UAAWzF,EAAKhB,MAAMuL,aAAa9E,UACnCC,kBAAmB1F,EAAKhB,MAAMuL,aAAa7E,kBAC3CC,gBAAiB3F,EAAKhB,MAAMuL,aAAa5E,gBACzCC,cAAe5F,EAAKhB,MAAMuL,aAAa3E,cACvCC,0BAA2B7F,EAAKhB,MAAMuL,aAAa1E,2BAEvDkB,QAAQ,OAKhBnC,gBAAkB,WAEVC,GAAoB,CACpB7E,EAAK5G,MAAM8P,SAAS9D,UACpBpF,EAAK5G,MAAM8P,SAAS7D,SACpBrF,EAAK5G,MAAM8P,SAAS7E,YACpBrE,EAAK5G,MAAM8P,SAAS5D,aACpBtF,EAAK5G,MAAM8P,SAAS3D,iBACpBvF,EAAK5G,MAAM8P,SAAS1D,mBACpBxF,EAAK5G,MAAM8P,SAASxD,kBACpB1F,EAAK5G,MAAM8P,SAASvD,mBAIpB3F,EAAKhB,MAAMK,SAAS,CAAE7F,KAAM,kBAAmBK,QAAQuG,OAAA0E,GAAA,EAAA1E,CAAA,GAAMJ,EAAK5G,MAAM8P,SAAlB,CAA4B/L,OAAQ6C,EAAKhB,MAAM7E,KAAKyC,OAC1GoD,EAAKG,SAAS,CAAE4G,QAAQ,KAIxB7B,MAAM,sFAEVH,KAAKC,KAAK,CACNxL,KAAM,UACNyL,MAAO,yBAKfkK,kBAAoB,SAACrP,GACjBE,EAAKhB,MAAMK,SAAS,CAAC7F,KAAI,kBAAqBK,QAASiG,IACvDiF,KAAKC,KAAK,CACNxL,KAAM,UACNyL,MAAO,iGAKN,IAAAzE,EAAAC,KACGC,EAAYD,KAAKzB,MAAjB0B,QAER,OACIzB,EAAAtE,EAAAuE,cAAA,WAEID,EAAAtE,EAAAuE,cAAA,QAAMC,UAAU,gBACZF,EAAAtE,EAAAuE,cAAA,WACID,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMrG,WAAS,EAACvF,QAAS,GACrB7C,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX3O,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAKyO,iBAJlB,SASJjQ,EAAAtE,EAAAuE,cAACwO,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAK,GACZ3O,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CAEIF,QAAQ,WACRgG,KAAK,QACL5F,MAAM,UACNpC,QAAS,WAAOoB,EAAK2O,kBAAkB3O,EAAKxB,MAAMuL,aAAa6E,sBALnE,aAYZnQ,EAAAtE,EAAAuE,cAAA,2BACAD,EAAAtE,EAAAuE,cAAA,UAAID,EAAAtE,EAAAuE,cAAA,iCAAyBuB,KAAKrH,MAAM8P,SAASpF,eACjD7E,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,UAAQ,EAACkB,aAAc1G,KAAKrH,MAAM8P,SAAS9D,UAAWjG,UAAWuB,EAAQO,UAAWE,MAAM,aAAaE,SAAUZ,KAAK+D,kBAAkB,eAClMvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,UAAQ,EAACkB,aAAc1G,KAAKrH,MAAM8P,SAAS7D,SAAUlG,UAAWuB,EAAQO,UAAWE,MAAM,YAAYE,SAAUZ,KAAK+D,kBAAkB,cAChMvF,EAAAtE,EAAAuE,cAAA,6BACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMI,aAAc1G,KAAKrH,MAAM8P,SAAShF,cAAe/E,UAAWuB,EAAQO,UAAWE,MAAM,iBAAiBE,SAAUZ,KAAK+D,kBAAkB,mBACjMvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMI,aAAc1G,KAAKrH,MAAM8P,SAAS/E,KAAMhF,UAAWuB,EAAQO,UAAWE,MAAM,OAAOE,SAAUZ,KAAK+D,kBAAkB,UAC9KvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMI,aAAc1G,KAAKrH,MAAM8P,SAAS9P,MAAO+F,UAAWuB,EAAQO,UAAWE,MAAM,QAAQE,SAAUZ,KAAK+D,kBAAkB,WAChLvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMI,aAAc1G,KAAKrH,MAAMgL,QAASjF,UAAWuB,EAAQO,UAAWE,MAAM,WAAWE,SAAUZ,KAAK+D,kBAAkB,aAC5KvF,EAAAtE,EAAAuE,cAAA,iCACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,UAAQ,EAACkB,aAAc1G,KAAKrH,MAAM8P,SAAS7E,YAAalF,UAAWuB,EAAQO,UAAWE,MAAM,eAAeE,SAAUZ,KAAK+D,kBAAkB,iBACtMvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMI,aAAc1G,KAAKrH,MAAM8P,SAAS5E,eAAgBnF,UAAWuB,EAAQO,UAAWE,MAAM,kBAAkBE,SAAUZ,KAAK+D,kBAAkB,oBACnMvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,UAAQ,EAACkB,aAAc1G,KAAKrH,MAAM8P,SAAS5D,aAAcnG,UAAWuB,EAAQO,UAAWE,MAAM,gBAAgBE,SAAUZ,KAAK+D,kBAAkB,kBACxMvF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,oCAwBAD,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQyF,aAC5BlH,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,8BAApC,wBAGApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACIQ,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCR,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,uBAAuBtE,GAAG,+BAC7C2D,MAAOE,KAAKrH,MAAM8P,SAAS1D,mBAC3BnE,SAAUZ,KAAK+D,kBAAkB,sBACjCtD,KAAK,wBAELjC,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,IAAKpB,UAAWuB,EAAQmG,MAAzC,oBACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,oBACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,6BACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,2BACA5H,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAO,GAAIpB,UAAWuB,EAAQmG,MAAxC,4BAGR5H,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQsG,QAC5B/H,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,oBAApC,eAGApD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAM8P,SAASzD,UACjBxG,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIH,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzC1F,SAAUZ,KAAKqF,0BACftE,MAAM,YACN+E,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,aAAatE,GAAG,qBACnCsK,SAAO,IANf,IAOQ,OAGRjI,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIH,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzC1F,SAAUZ,KAAKqF,0BACftE,MAAM,YACN+E,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,aAAatE,GAAG,uBACpC,OAIfqC,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAM8P,SAASzD,WACjBxG,EAAAtE,EAAAuE,cAAAD,EAAAtE,EAAA6E,SAAA,KACIP,EAAAtE,EAAAuE,cAAA,8CACAD,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,SAAUxF,KAAKrH,MAAM8P,SAASzD,UAAW0B,aAAc1G,KAAKrH,MAAM8P,SAASxD,kBAAmBvG,UAAWuB,EAAQO,UAAWE,MAAM,qBAAqBE,SAAUZ,KAAK+D,kBAAkB,uBAClPvF,EAAAtE,EAAAuE,cAAC8B,GAAA,EAAD,CAAW8F,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EAAMd,SAAUxF,KAAKrH,MAAM8P,SAASzD,UAAW0B,aAAc1G,KAAKrH,MAAM8P,SAASvD,gBAAiBxG,UAAWuB,EAAQO,UAAWE,MAAM,mBAAmBE,SAAUZ,KAAK+D,kBAAkB,qBAC9OvF,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQyF,aAC5BlH,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,wBAApC,kBAGApD,EAAAtE,EAAAuE,cAACoH,GAAA,EAAD,CACIC,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,iBAAiBtE,GAAG,yBACvCkK,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAM8P,SAASzD,UAC9BlF,MAAO,GACPc,SAAUZ,KAAK+D,kBAAkB,kBAEjCvF,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAM,UAAhB,UACAtB,EAAAtE,EAAAuE,cAACyH,GAAA,EAAD,CAAUpG,MAAM,WAAhB,aAGRtB,EAAAtE,EAAAuE,cAACgH,GAAA,EAAD,CAAa/G,UAAWuB,EAAQsG,QAC5B/H,EAAAtE,EAAAuE,cAACkH,GAAA,EAAD,CAAYH,UAAQ,EAACI,QAAM,EAAChE,QAAQ,cAApC,4CAGApD,EAAAtE,EAAAuE,cAAA,WACCuB,KAAKrH,MAAM8P,SAASrD,0BACjB5G,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIC,SAAO,EACPJ,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAM8P,SAASzD,UAC9BpE,SAAUZ,KAAKsF,uBACfQ,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,OAAOtE,GAAG,iBANrC,IAOQ,OAGRqC,EAAAtE,EAAAuE,cAAA,YACID,EAAAtE,EAAAuE,cAAC+H,GAAA,EAAD,CACIH,UAAgC,IAAtBrG,KAAKrH,MAAM2N,SAAoB,EACzCd,SAAUxF,KAAKrH,MAAM8P,SAASzD,UAC9BpE,SAAUZ,KAAKsF,uBACfQ,MAAOtH,EAAAtE,EAAAuE,cAACsH,GAAA,EAAD,CAAOtF,KAAK,OAAOtE,GAAG,iBALrC,IAMQ,QAMxBqC,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACI8F,KAAK,QACLhG,QAAQ,WACRI,MAAM,UACNpC,QAASqB,KAAKgE,mBAJlB,UAQAxF,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACIF,QAAQ,YACRgG,KAAK,QACL5F,MAAM,YACNpC,QAASqB,KAAKmE,iBAJlB,iBA3TclD,cAoVnB3C,eALS,SAAA3F,GAAK,MAAK,CAC9Be,KAAMf,EAAMe,KACZC,SAAUhB,EAAMgB,SAASN,kBAGdiF,CAAyB4C,aAnXzB,SAAAC,GAAK,MAAK,CACrByF,UAAW,GAIXpG,UAAW,CACPY,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEXkE,YAAa,CACTtE,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEX+E,OAAQ,CACJnF,WAAYD,EAAME,UAClBC,YAAaH,EAAME,UACnBE,aAAcJ,EAAME,QAAQ,GAC5BG,MAAO,KAEXuF,MAAO,CACHrF,UAAW,IAEf0E,KAAM,CACF5E,MAAO,OAwVyBN,CAAmBsN,KC7W3D,IAYMI,iNAEJjW,MAAQ,CACNuE,aAAa,KAGf2R,uBAAyB,WACvB/T,QAAQC,IAAI,YAIZwE,EAAKhB,MAAM0F,QAAQC,KAAK,0BAG1B4K,mBAAqB,WACnBhU,QAAQC,IAAI,wFAGL,IAAAgF,EAAAC,KACaA,KAAKzB,MAAjB0B,QAIR,OACEzB,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,kBACNqC,EAAAtE,EAAAuE,cAAA,OAAKtC,GAAG,uBACNqC,EAAAtE,EAAAuE,cAAA,4BACAD,EAAAtE,EAAAuE,cAACoC,GAAA,EAAD,CACEF,QAAQ,WACRgG,KAAK,QACL5F,MAAM,UACNpC,QAASqB,KAAK6O,wBAJhB,gBAoBiC,IAAhC7O,KAAKzB,MAAM3E,UAAUf,QACpBmH,KAAKzB,MAAM3E,UAAUoM,IAAI,SAAA8D,GACvB,GAAIA,EAAaqE,cAAgBpO,EAAKxB,MAAMjF,eAAe6C,GACzD,OAAOqC,EAAAtE,EAAAuE,cAACuL,GAAA,EAAD,CACLtL,UAAU,gBACVyH,IAAK2D,EAAauE,YAClBvO,MAAOgK,EAAauE,aAEpB7P,EAAAtE,EAAAuE,cAACwL,GAAA,EAAD,CAAuBC,WAAY1L,EAAAtE,EAAAuE,cAAC0L,GAAAjQ,EAAD,OACjCsE,EAAAtE,EAAAuE,cAAA,OAAKC,UAAU,uBACbF,EAAAtE,EAAAuE,cAAA,WACED,EAAAtE,EAAAuE,cAAA,UAAKqL,EAAanF,UAAlB,IAA8BmF,EAAalF,aAIjDpG,EAAAtE,EAAAuE,cAACiM,GAAA,EAAD,CAAuBhM,UAAU,yBAC/BF,EAAAtE,EAAAuE,cAAA,OAAKC,UAAU,kCAUbF,EAAAtE,EAAAuE,cAACsQ,GAAD,CAAqBjF,aAAcA,kBAzE7B7I,aAyGb3C,eARS,SAAA3F,GAAK,MAAK,CAChCe,KAAMf,EAAMe,KACZJ,eAAgBX,EAAMgB,SAASL,eAC/BM,UAAWjB,EAAMiB,UAAUL,iBAC3BZ,UAIa2F,CAAyB4C,aArHzB,SAAAC,GAAK,MAAK,CACvByL,MAAO,CACLoC,SAAU,WACVxN,MAAOL,EAAME,QAAQ,IACrB4N,gBAAiB9N,EAAMwK,QAAQuD,WAAWtC,MAC1CuC,UAAWhO,EAAMiO,QAAQ,GACzBhD,QAASjL,EAAME,QAAQ,GACvBgO,QAAS,UA8G2BnO,CAAmB0N,kPCxDrDU,gOACJ3W,MAAQ,CACN4W,MAAM,KAGRC,iBAAmB,WACjBjQ,EAAKG,SAAS,CAAE6P,MAAM,OAGxBE,kBAAoB,WAClBlQ,EAAKG,SAAS,CAAE6P,MAAM,+EAOf,IAAAG,EAAAC,EAAA5P,EAAAC,KAAA4P,EACoB5P,KAAKzB,MAAxB0B,EADD2P,EACC3P,QAASkB,EADVyO,EACUzO,MAEjB,OACE3C,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQ8J,MACtBvL,EAAAtE,EAAAuE,cAACoR,GAAA,EAAD,MACArR,EAAAtE,EAAAuE,cAACqR,GAAA,EAAD,CACE/O,MAAM,QACNiO,SAAS,QACTtQ,UAAWqR,KAAW9P,EAAQ+P,OAATrQ,OAAAC,GAAA,EAAAD,CAAA,GAClBM,EAAQgQ,YAAcjQ,KAAKrH,MAAM4W,QAGpC/Q,EAAAtE,EAAAuE,cAACyR,GAAA,EAAD,CAASC,gBAAiBnQ,KAAKrH,MAAM4W,MACnC/Q,EAAAtE,EAAAuE,cAAC2R,GAAA,EAAD,CACErP,MAAM,UACNsP,aAAW,cACX1R,QAASqB,KAAKwP,iBACd9Q,UAAWqR,KAAW9P,EAAQqQ,WAAT3Q,OAAAC,GAAA,EAAAD,CAAA,GAClBM,EAAQsQ,KAAOvQ,KAAKrH,MAAM4W,QAG7B/Q,EAAAtE,EAAAuE,cAAC+R,GAAAtW,EAAD,OAEFsE,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,gBAAgBI,GAAG,SACjCN,EAAAtE,EAAAuE,cAAA,OACEC,UAAWuB,EAAQwQ,QACnBpQ,IAAKC,KACLoQ,IAAI,iBASZlS,EAAAtE,EAAAuE,cAACkS,GAAA,EAAD,CACEhQ,QAAQ,YACRjC,UAAWqR,KAAW9P,EAAQ2Q,QAATlB,EAAA,GAAA/P,OAAAC,GAAA,EAAAD,CAAA+P,EAClBzP,EAAQ4Q,WAAa7Q,KAAKrH,MAAM4W,MADd5P,OAAAC,GAAA,EAAAD,CAAA+P,EAElBzP,EAAQ6Q,aAAe9Q,KAAKrH,MAAM4W,MAFhBG,IAIrBzP,QAAS,CACP2M,MAAOmD,MAAUJ,EAAA,GAAAhQ,OAAAC,GAAA,EAAAD,CAAAgQ,EACd1P,EAAQ4Q,WAAa7Q,KAAKrH,MAAM4W,MADlB5P,OAAAC,GAAA,EAAAD,CAAAgQ,EAEd1P,EAAQ6Q,aAAe9Q,KAAKrH,MAAM4W,MAFpBI,KAKnBJ,KAAMvP,KAAKrH,MAAM4W,MAEjB/Q,EAAAtE,EAAAuE,cAAA,OAAKC,UAAWuB,EAAQ8Q,SACtBvS,EAAAtE,EAAAuE,cAAC2R,GAAA,EAAD,CAAYzR,QAASqB,KAAKyP,mBACH,QAApBtO,EAAM6P,UACLxS,EAAAtE,EAAAuE,cAACwS,GAAA/W,EAAD,MAEAsE,EAAAtE,EAAAuE,cAACyS,GAAAhX,EAAD,QAINsE,EAAAtE,EAAAuE,cAACgM,GAAA,EAAD,MACAjM,EAAAtE,EAAAuE,cAAC0S,GAAA,EAAD,KACE3S,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,SAC5BN,EAAAtE,EAAAuE,cAAC2S,GAAA,EAAD,CAAUC,QAAM,GACd7S,EAAAtE,EAAAuE,cAAC6S,GAAA,EAAD,KAAe9S,EAAAtE,EAAAuE,cAAC8S,GAAArX,EAAD,OACfsE,EAAAtE,EAAAuE,cAAC+S,GAAA,EAAD,CAAcjF,QAAQ,WAG1B/N,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,iBAC5BN,EAAAtE,EAAAuE,cAAC2S,GAAA,EAAD,CAAUC,QAAM,GACd7S,EAAAtE,EAAAuE,cAAC6S,GAAA,EAAD,KAAe9S,EAAAtE,EAAAuE,cAACgT,GAAAvX,EAAD,OACfsE,EAAAtE,EAAAuE,cAAC+S,GAAA,EAAD,CAAcjF,QAAQ,gBAG1B/N,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,CAAMH,UAAU,WAAWI,GAAG,SAC5BN,EAAAtE,EAAAuE,cAAC2S,GAAA,EAAD,CACEC,QAAM,EACN1S,QAAS,kBAAMoB,EAAKxB,MAAMK,SAAS,CAAE7F,KAAM,aAE3CyF,EAAAtE,EAAAuE,cAAC6S,GAAA,EAAD,KAAe9S,EAAAtE,EAAAuE,cAACiT,GAAAxX,EAAD,OACfsE,EAAAtE,EAAAuE,cAAC+S,GAAA,EAAD,CAAcjF,QAAQ,wBAjGdtL,cA4JT3C,eARS,SAAA3F,GAAK,MAAK,CAChCe,KAAMf,EAAMe,KACZC,SAAUhB,EAAMgB,SAASN,gBACzBC,eAAgBX,EAAMgB,SAASL,eAC/BM,UAAWjB,EAAMiB,UAAUL,iBAC3BZ,UAGa2F,CACb4C,aA9Na,SAAAC,GAAK,MAAK,CACvB4I,KAAM,CACJlD,QAAS,QAEXmJ,OAAQ,CACN2B,OAAQxQ,EAAMwQ,OAAOf,OAAS,EAC9BgB,WAAYzQ,EAAM0Q,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5Q,EAAM0Q,YAAYE,OAAOC,MACjCC,SAAU9Q,EAAM0Q,YAAYI,SAASC,iBAGzCjC,YAAa,CACX7O,WAdgB,IAehBI,MAAK,eAAA3E,OAfW,IAeX,OACL+U,WAAYzQ,EAAM0Q,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5Q,EAAM0Q,YAAYE,OAAOC,MACjCC,SAAU9Q,EAAM0Q,YAAYI,SAASE,kBAGzC7B,WAAY,CACVlP,WAAY,GACZE,YAAa,IAEfiP,KAAM,CACJ1J,QAAS,QAEX+J,OAAQ,CACNpP,MA7BgB,IA8BhB4Q,WAAY,EACZC,WAAY,UAEdxB,WAAY,CACVrP,MAlCgB,IAmChBoQ,WAAYzQ,EAAM0Q,YAAYC,OAAO,QAAS,CAC5CC,OAAQ5Q,EAAM0Q,YAAYE,OAAOC,MACjCC,SAAU9Q,EAAM0Q,YAAYI,SAASE,kBAGzCrB,YAAYnR,OAAAC,GAAA,EAAAD,CAAA,CACViS,WAAYzQ,EAAM0Q,YAAYC,OAAO,QAAS,CAC5CC,OAAQ5Q,EAAM0Q,YAAYE,OAAOC,MACjCC,SAAU9Q,EAAM0Q,YAAYI,SAASC,gBAEvCI,UAAW,SACX9Q,MAA4B,EAArBL,EAAME,QAAQgL,KAAW,GAC/BlL,EAAMoR,YAAYC,GAAG,MAAQ,CAC5BhR,MAA4B,EAArBL,EAAME,QAAQgL,KAAW,IAGpC0E,QAAQpR,OAAA0E,GAAA,EAAA1E,CAAA,CACNkH,QAAS,OACTmF,WAAY,SACZyG,eAAgB,WAChBrG,QAAS,SACNjL,EAAM0L,OAAOkE,SAElB2B,QAAS,CACP/F,SAAU,EACVP,QAA8B,EAArBjL,EAAME,QAAQgL,MAEzBoE,QAAS,CACPhP,OAAQ,MAiKS,CAAEkR,WAAW,GAAhCzR,CAAwCoO,kCChOpCnO,GAAQyR,aAAe,CAC3BjH,QAAS,CACPY,QAAS,CAEPC,KAAM,WAIRX,UAAW,CAETW,KAAM,WAIRqG,MAAO,CACLrG,KAAM,cAMNsG,oMAEF9S,KAAKzB,MAAMK,SAAS,CAAE7F,KAAM,gDAI5B,OACIyF,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAACsU,GAAA,EAAD,CAAkB5R,MAAOA,IACvB3C,EAAAtE,EAAAuE,cAACI,GAAA,EAAD,KAEGmB,KAAKzB,MAAM7E,KAAKyC,IAAMqC,EAAAtE,EAAAuE,cAACuU,GAAD,MACvBxU,EAAAtE,EAAAuE,cAACyD,GAAA,EAAD,KAEE1D,EAAAtE,EAAAuE,cAACyD,GAAA,EAAD,CAAU+Q,OAAK,EAACC,KAAK,IAAIpU,GAAG,UAG5BN,EAAAtE,EAAAuE,cAACyD,GAAA,EAAD,CACE+Q,OAAK,EACLE,KAAK,SACLpR,UAAWK,KAMb5D,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,QACLpR,UAAWyL,KAGbhP,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,qBACLpR,UAAWqB,KAGb5E,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,sBACLpR,UAAW2C,KAGblG,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,6BACLpR,UAAWyM,KAGbhQ,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,gBACLpR,UAAW6M,KAKbpQ,EAAAtE,EAAAuE,cAAC2U,GAAD,CACEH,OAAK,EACLE,KAAK,QACLpR,UAAWM,KAKb7D,EAAAtE,EAAAuE,cAACyD,GAAA,EAAD,CAAOmR,OAAQ,kBAAM7U,EAAAtE,EAAAuE,cAAA,+BAlEjBwC,aAqFH3C,eAPS,SAAC3F,GACvB,MAAO,CACLM,UAAWN,EAAMM,UACjBS,KAAMf,EAAMe,OAID4E,CAAyBwU,IC3HlCQ,GAAiBC,cAKjBC,GAEJ,CAACF,IAEGG,GAAQC,YAGZla,EAEAma,IAAeC,WAAf,EAAmBJ,KAKrBF,GAAeO,IAAI3V,IAEnByP,IAAS0F,OACP7U,EAAAtE,EAAAuE,cAACqV,EAAA,EAAD,CAAUL,MAAOA,IACfjV,EAAAtE,EAAAuE,cAACsV,GAAD,OAEFC,SAASC,eAAe","file":"static/js/main.c5ab030d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/400dpiLogoCropped.c2b5f6be.png\";","module.exports = __webpack_public_path__ + \"static/media/small-logo.4e9f33f3.png\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","import { combineReducers } from 'redux';\n\nconst businessReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_BUSINESS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst singleBusiness = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_SINGLE_BUSINESS':\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  businessReducer,\n  singleBusiness,\n});\n","import { combineReducers } from 'redux';\n\nconst employeesReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_EMPLOYEES':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  employeesReducer,\n});\n","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport business from './businessReducer';\nimport employees from './employeesReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so or project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  business, // will have an array of business and an object of a single business\n  employees, // will have an array of employees\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n} \n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n    yield put({ type: 'FETCH_BUSINESSES', payload: response.data.id});\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* addBusiness(action) {\n    try {\n        console.log('add business saga');\n        console.log(action.payload);\n        yield axios.post('api/business', action.payload);\n        yield put({type: 'FETCH_BUSINESSES', payload: action.payload.userId});\n    } catch (error) {\n        console.log(\"Error with adding business:\", error)\n    }\n}\n\n// action.payload is user id\nfunction* fetchBusinesses(action) {\n    try {\n        // action.payload is a the users id\n        // query database to return only business that belong to this user\n        const businessResponse = yield axios.get(`api/business/?id=${action.payload}`);\n        // businessResponse.data is an array of business objects\n        yield put({ type: 'SET_BUSINESS', payload: businessResponse.data });\n        if (businessResponse.data.length !== 0) {\n            // payload is a single business object at the first index of the array response if not length of zero\n            yield put({type: 'FETCH_SINGLE_BUSINESS', payload: businessResponse.data[0]});\n        }\n        yield put({type:'FETCH_EMPLOYEES', payload: action.payload }); // action.payload is the user id\n    } catch (error) {\n        console.log(\"Error with fetching businesses:\", error)\n    }\n\n}\n\n// action is a single business object dispatched form HomePage when user selects a business\nfunction* fetchSingleBusiness(action) {\n    try {\n        yield put({type: 'SET_SINGLE_BUSINESS', payload: action.payload});\n    } catch (error) {\n        console.log(\"Error with setting single business:\", error)\n    }\n}\n\n\n\nfunction* businessSaga() {\n    yield takeLatest('POST_REGISTER_BUSINESS', addBusiness);\n    yield takeLatest('FETCH_BUSINESSES', fetchBusinesses);\n    yield takeLatest('FETCH_SINGLE_BUSINESS', fetchSingleBusiness);\n}\n\nexport default businessSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* addEmployee(action) {\n    try {\n        console.log('add employee saga');\n        console.log(action.payload);\n        yield axios.post('api/employee', action.payload);\n        // yield put({type: 'FETCH_BUSINESSES', payload: action.payload.userId});\n    } catch (error) {\n        console.log(\"Error with adding employee:\", error)\n    }\n}\n\n// action.payload is the user ID dispatching from\nfunction* fetchEmployees(action) {\n    try {\n        console.log('fetch employee saga');\n        console.log(action.payload);\n        const employeesResponse = yield axios.get(`api/employee?id=${action.payload}`); // payload is the user's ID\n        console.log(employeesResponse.data);\n        yield put ({type: `SET_EMPLOYEES`, payload: employeesResponse.data});\n    } catch (error) {\n        console.log(\"Error with fetching employees:\", error);\n    }\n}\n\n// action.payload is the an updated employee object\nfunction* updateEmployee(action) {\n    try{\n        console.log('fetch employee saga');\n        console.log(action.payload);\n        yield axios.put(`api/employee`, action.payload); // updated employee object\n        yield put ({type: `FETCH_EMPLOYEES`});\n    } catch (error) {\n        console.log(\"Error with updating employee record:\", error);\n    }\n}\n\n// action.payload is and object with the property businessEmployeeID\n// id is matches the employee_business table\nfunction* deleteEmployee(action) {\n    try {\n        yield axios.delete(`api/employee/${action.payload}`);\n        yield put ({type: `FETCH_EMPLOYEES`});\n    } catch (error) {\n        console.log(\"Error with deleting employee record:\", error);\n    }\n}\n\n\nfunction* employeeSaga() {\n    yield takeLatest('POST_REGISTER_EMPLOYEE', addEmployee);\n    yield takeLatest('FETCH_EMPLOYEES', fetchEmployees);\n    yield takeLatest('UPDATE_EMPLOYEE', updateEmployee);\n    yield takeLatest('DELETE_EMPLOYEE', deleteEmployee);\n}\n\nexport default employeeSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// action.payload is an object dispatched from the PaymentForm component\n// the object has a property of selectedEmployee object, and payment information properties\nfunction* postPayment(action) {\n    try {\n        console.log('post payment saga');\n        console.log(action.payload);\n        yield axios.post('api/payment', action.payload);\n        console.log('payment posted');\n    } catch (error) {\n        console.log(\"Error with adding employee:\", error)\n    }\n}\n\nfunction* employeeSaga() {\n    yield takeLatest('POST_PAYMENT_RECORD', postPayment);\n}\n\nexport default employeeSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport businessSaga from './businessSaga';\nimport employeeSaga from './employeeSaga';\nimport paymentSaga from './paymentSaga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    businessSaga(),\n    employeeSaga(),\n    paymentSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">Prime Solo Project</h2>\n    </Link>\n    <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Home' : 'Login / Register'}\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          {/* <Link className=\"nav-link\" to=\"/info\">\n            Info Page\n          </Link> */}\n          <Link className=\"nav-link\" to=\"/my/employees\">\n            My Employees\n          </Link>\n          <Link className=\"nav-link\" to=\"/register/business\">\n            Add Business\n          </Link>\n          {/* only show Add Employee link if businesses have been added */}\n          {props.business.length !==0 && (\n          <Link className=\"nav-link\" to=\"/register/new/employee\">\n            Add Employee\n          </Link>)}\n\n          <LogOutButton className=\"nav-link\"/>\n\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n  business: state.business.businessReducer,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './LoginPage.css';\nimport { TextField, withStyles, ListItemSecondaryAction } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nimport smallLogo from './400dpiLogoCropped.png';\n\nconst styles = theme => ({\n  // container: {\n  //     display: 'flex',\n  //     flexWrap: 'wrap',\n  // },\n  textField: {\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    marginBottom: theme.spacing(2),\n    width: 300,\n  },\n  loginButton: {\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    marginBottom: theme.spacing(2),\n    width: 300,\n  },\n  logo: {\n    height: 80,\n    marginTop: 10,\n    marginBottom: 20,\n  }\n})\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div id=\"login-main-container\">\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login} id=\"login-form\">\n          <img className={classes.logo} src={smallLogo}/>\n          <h3>Login</h3>\n          <div>\n            <TextField\n              className={classes.textField}\n              type=\"text\"\n              name=\"username\"\n              label=\"username\"\n              variant=\"outlined\"\n              value={this.state.username}\n              onChange={this.handleInputChangeFor('username')}\n            >\n            </TextField>\n          </div>\n          <div>\n            <TextField\n              className={classes.textField}\n              type=\"password\"\n              name=\"password\"\n              label=\"password\"\n              variant=\"outlined\"\n              value={this.state.password}\n              onChange={this.handleInputChangeFor('password')}\n            >\n            </TextField>\n          </div>\n          <div>\n            <Button\n              // className=\"log-in\"\n              \n              className={classes.loginButton}\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              Login\n            </Button >\n          </div>\n          <center  white-space= \"pre\">\n            <button\n              type=\"button\"\n              className=\"link-button\"\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n            >\n              Register\n            </button>\n            <br />\n            {/* <button\n              type=\"button\"\n              className=\"link-button\"\n            >\n              Forgot password\n            </button> */}\n        </center>\n        </form>\n        \n      </div>\n    );\n  }\n}\n\nLoginPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(LoginPage));\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p>\n        This about page is for anyone to read!\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n    <div>\n      <h1 id=\"welcome\">\n        Welcome, {props.user.username}!\n      </h1>\n      <p>Your ID is: {props.user.id}</p>\n      <LogOutButton className=\"log-in\" />\n    </div>\n);\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({user});\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n","\nexport default ((arrayOfFields) => {\n    let count = 0;\n    for(const field of arrayOfFields) {\n        if (field === null || field === '') {\n            count +=1;\n        }\n    }\n    if (count === 0){\n        return true;\n    }\n    else {\n        return false;\n    }\n})","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport \"./AddBusiness.css\";\n\nimport Swal from 'sweetalert2';\n\n// Function that checks for empty strings or null values\n// Accepts an array of values\n// Returns true if all fields are not empty\n// Returns false if any fields are empty\nimport checkRequiredFields from '../CheckRequiredFields/CheckRequiredFields';\n\nclass AddBusiness extends Component {\n\n    state = {\n        businessName: null, // string, not null\n        serviceType: null, // sting, not null\n        employerIdentificationNumber: null, // string\n        stateTaxId: null, // string\n        streetAddress: null, // string\n        city: null, // string\n        state: null, // string\n        zipCode:null, // string\n        mobilePhone: null, // string \n        alternatePhone: null, // string\n        email: null, // string not null\n    }\n\n    handleChangeInput = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        })\n    }\n\n    handleClickCancel = () => {\n        this.setState ({\n            businessName: '',\n            employerIdentificationNumber: '',\n            stateTaxId: '',\n            streetAddress: '',\n            city: '',\n            state: '',\n            zipCode: '',\n            mobilePhone: '',\n            alternatePhone: '',\n            serviceType: '',\n            email: '',\n        })\n        this.props.history.push('/home');\n    }\n\n    // clean code\n    handleClickSave = () => {\n        if (checkRequiredFields([this.state.businessName, this.state.serviceType, this.state.email])) {\n            this.props.dispatch({type: 'POST_REGISTER_BUSINESS', payload: {...this.state, userId: this.props.user.id}});\n            this.props.history.push('/home');\n            Swal.fire({\n                type: 'success',\n                title: 'Business Added!',\n            });\n        }\n        else {\n            alert('Please complete all required fields OR select \"Skip\" to cancel adding a business!');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"add-business-form\">\n                <form >\n                    <h1>Register Your Business</h1>\n                    <label  className=\"required-field\">\n                        Business Name\n                    <input onChange={this.handleChangeInput('businessName')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        Employer Identification Number (EID)\n                    <input onChange={this.handleChangeInput('employerIdentificationNumber')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        State Tax ID\n                    <input onChange={this.handleChangeInput('stateTaxId')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        Street Address\n                    <input onChange={this.handleChangeInput('streetAddress')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        City\n                    <input onChange={this.handleChangeInput('city')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        State\n                    <input onChange={this.handleChangeInput('state')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        Zip Code\n                    <input onChange={this.handleChangeInput('zipCode')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        Mobile Phone\n                    <input onChange={this.handleChangeInput('mobilePhone')}></input>\n                    </label>\n                    <br />\n                    <label>\n                        Alternate Phone\n                    <input onChange={this.handleChangeInput('alternatePhone')}></input>\n                    </label>\n                    <br />\n                    <label className=\"required-field\">\n                        Service Type\n                    <input onChange={this.handleChangeInput('serviceType')}></input>\n                    </label>\n                    <br />\n                    <label className=\"required-field\">\n                        Email Address\n                    <input onChange={this.handleChangeInput('email')}></input>\n                    </label>\n                    <br />\n                    <button onClick={this.handleClickCancel}>Cancel</button>\n                    <button onClick={this.handleClickSave}>Save</button>\n                </form>\n                {/* <pre>Local State{JSON.stringify(this.state, null, 2)}</pre>\n                <pre>redux State{JSON.stringify(this.props.state, null, 2)}</pre> */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.user,\n    state\n});\n\nexport default connect(mapStateToProps)(AddBusiness);\n","\n// React\nimport React, { Component } from 'react';\n\n// Material-UI\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport Swal from 'sweetalert2';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Stylesheet\nimport './AddEmployee.css'\n\n// Function that checks for empty strings or null values\n// Accepts an array of values\n// Returns true if all fields are not empty\n// Returns false if any fields are empty\nimport checkRequiredFields from '../CheckRequiredFields/CheckRequiredFields';\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    selectField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    switch: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    dense: {\n        marginTop: 19,\n    },\n    menu: {\n        width: 200,\n    },\n});\n\nclass AddEmployee extends Component {\n\n    state = {\n        firstName: '', // employee table, not null\n        lastName: '', // employee table, not null\n        streetAddress: null, // address table\n        city: null, // address table\n        state: null, // address table\n        zipCode: null, // address table\n        mobilePhone: '', // contact table, not null\n        alternatePhone: null, // contact table\n        emailAddress: '', // contact table, not null\n        assignedBusiness: '', // select current business id from redux state, insert into the employee_business table\n        payPeriodFrequency: '', // employee_business table, not null\n        isTaxable: false, // employee_business table, not null\n        federalAllowances: '', // withholding table, not null\n        stateAllowances: '', // withholding table, not null\n        maritalStatus: '', // withholding table, not null (select with options)\n        employerPaysEmployeesFica: false, // withholding table, not null\n    }\n\n    handleChangeInput = (propertyName) => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    }\n\n    handleChangeSwitchTaxable = () => {\n        // if condition is true, set isTaxable to false and the employerPaysEmployeeFica to false\n        // else, only set the isTaxable to the opposite value of its current value\n        if (this.state.isTaxable) {\n            this.setState({\n                isTaxable: !this.state.isTaxable,\n                employerPaysEmployeesFica: false,  // when isTaxable is toggled off, set back to original state\n                federalAllowances: '', // when isTaxable is toggled off, set back to original state\n                stateAllowances: '',  // when isTaxable is toggled off, set back to original state\n                maritalStatus: '',  // when isTaxable is toggled off, set back to original state\n            });\n        } else {\n            this.setState({\n                isTaxable: !this.state.isTaxable,\n            });\n        }\n    }\n\n    handleChangeSwitchFica = () => {\n        this.setState({\n            employerPaysEmployeesFica: !this.state.employerPaysEmployeesFica,\n        });\n    }\n\n    // skip adding employee and go to home\n    handleClickCancel = () => {\n        this.setState({\n            firstName: '', // employee table, not null\n            lastName: '', // employee table, not null\n            streetAddress: null, // address table\n            city: null, // address table\n            state: null, // address table\n            zipCode: null, // address table\n            mobilePhone: '', // contact table, not null\n            alternatePhone: null, // contact table\n            emailAddress: '', // contact table, not null\n            assignedBusiness: '', // select current business id from redux state, insert into the employee_business table, not null\n            payPeriodFrequency: '', // employee_business table, not null\n            isTaxable: false, // employee_business table, not null\n            federalAllowances: '', // withholding table, not null\n            stateAllowances: '', // withholding table, not null\n            maritalStatus: '', // withholding table, not null (select with options)\n            employerPaysEmployeesFica: false, // withholding table, not null\n        })\n        this.props.history.push('/home');\n        // this.props.history.push('/my/employees');\n    }\n\n    handleClickSave = () => {\n        if (this.state.isTaxable) {\n            if (checkRequiredFields([\n                this.state.firstName,\n                this.state.lastName,\n                this.state.mobilePhone,\n                this.state.emailAddress,\n                this.state.assignedBusiness,\n                this.state.payPeriodFrequency,\n                this.state.federalAllowances,\n                this.state.stateAllowances,\n                this.state.maritalStatus,\n            ])) {\n                // will send all fields to saga\n                this.props.dispatch({ type: 'POST_REGISTER_EMPLOYEE', payload: { ...this.state, userId: this.props.user.id } });\n                this.props.history.push('/home');\n            } else {\n                alert('Please complete all required fields OR select \"Skip\" to cancel adding an employee!');\n            }\n        } else {\n            // do not check withholding for required fields\n            if (checkRequiredFields([\n                this.state.firstName,\n                this.state.lastName,\n                this.state.mobilePhone,\n                this.state.emailAddress,\n                this.state.assignedBusiness,\n                this.state.payPeriodFrequency,\n            ])) {\n                // will not send withholding information to saga\n                this.props.dispatch({ type: 'POST_REGISTER_EMPLOYEE', payload: { ...this.state, userId: this.props.user.id } });\n                this.props.history.push('/home');\n            } else {\n                alert('Please complete all required fields OR select \"Skip\" to cancel adding an employee!');\n            }\n        }\n \n        Swal.fire({\n            type: 'success',\n            title: 'Employee Added!',\n        });\n    }\n\n    handleClickAddSampleEmployee = () => {\n        this.setState({\n            firstName: 'Kathy', // employee table, not null\n            lastName: 'Peterson', // employee table, not null\n            streetAddress: '9891 42nd St SE', // address table\n            city: 'Minneapolis', // address table\n            state: 'MN', // address table\n            zipCode: '55403', // address table\n            mobilePhone: '2182323326', // contact table, not null\n            alternatePhone: null, // contact table\n            emailAddress: 'kathy.peterson@gmail.com', // contact table, not null\n            assignedBusiness: '', // select current business id from redux state, insert into the employee_business table\n            payPeriodFrequency: 52, // employee_business table, not null\n            isTaxable: false, // employee_business table, not null\n            federalAllowances: '', // withholding table, not null\n            stateAllowances: '', // withholding table, not null\n            maritalStatus: '', // withholding table, not null (select with options)\n            employerPaysEmployeesFica: false, // withholding table, not null\n        });\n\n        \n    }\n\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div id=\"add-employee-form\">\n                {/* <form className=\"register-employee-form\"> */}\n                <form>\n                    <h3 onClick={this.handleClickAddSampleEmployee}>Employee Name</h3>\n                    {/* <h4><em>Business / Service: {this.state.employee.businessName}</em></h4> */}\n                    <br />\n                    <TextField required value={this.state.firstName} className={classes.textField} label=\"First Name\" onChange={this.handleChangeInput('firstName')}></TextField>\n                    <TextField required value={this.state.lastName} className={classes.textField} label=\"Last Name\" onChange={this.handleChangeInput('lastName')}></TextField>\n                    <h3>Mailing Address</h3>\n                    <TextField value={this.state.streetAddress} className={classes.textField} label=\"Street Address\" onChange={this.handleChangeInput('streetAddress')}></TextField>\n                    <TextField value={this.state.city} className={classes.textField} label=\"City\" onChange={this.handleChangeInput('city')}></TextField>\n                    <TextField value={this.state.state} className={classes.textField} label=\"State\" onChange={this.handleChangeInput('state')}></TextField>\n                    <TextField value={this.state.zipCode} className={classes.textField} label=\"Zip Code\" onChange={this.handleChangeInput('zipCode')}></TextField>\n                    <h3>Contact Information</h3>\n                    <TextField required value={this.state.mobilePhone} className={classes.textField} label=\"Mobile Phone\" onChange={this.handleChangeInput('mobilePhone')}></TextField>\n                    <TextField value={this.state.alternatePhone} className={classes.textField} label=\"Alternate Phone\" onChange={this.handleChangeInput('alternatePhone')}></TextField>\n                    <TextField required value={this.state.emailAddress} className={classes.textField} label=\"Email Address\" onChange={this.handleChangeInput('emailAddress')}></TextField>\n                    <br />\n                    <h3>Employment Information</h3>\n                    <FormControl className={classes.selectField}>\n                        <InputLabel required shrink htmlFor=\"business-service-label\">\n                            Business / Service\n                        </InputLabel>\n                        <Select\n                            required\n                            input={<Input name=\"business-service\" id=\"business-service-label\" />}\n                            value={this.state.assignedBusiness}\n                            onChange={this.handleChangeInput('assignedBusiness')}\n                            name={\"business-service\"}\n                        >\n                            {this.props.business.length !== 0 &&\n                                this.props.business.map(eachBusiness => {\n                                    return <MenuItem\n                                        key={eachBusiness.id}\n                                        value={eachBusiness.id}\n                                        className={classes.menu}\n                                    >\n                                        {eachBusiness.businessName}\n                                    </MenuItem>\n                                })}\n                        </Select>\n                    </FormControl >\n                    <FormControl className={classes.selectField}>\n                        <InputLabel required shrink htmlFor=\"pay-period-frequency-label\">\n                            Pay Period Frequency\n                        </InputLabel>\n                        <Select\n                            disabled={this.state.isEdit === false && true}\n                            input={<Input name=\"pay-period-frequency\" id=\"pay-period-frequency-label\" />}\n                            value={this.state.payPeriodFrequency}\n                            onChange={this.handleChangeInput('payPeriodFrequency')}\n                            name=\"pay-period-frequency\"\n                        >\n                            <MenuItem value={360} className={classes.menu}>360 - Paid Daily</MenuItem>\n                            <MenuItem value={52} className={classes.menu}>52 - Paid Weekly</MenuItem>\n                            <MenuItem value={26} className={classes.menu}>26 - Paid Every Two Weeks</MenuItem>\n                            <MenuItem value={24} className={classes.menu}>24 - Paid Twice a Month</MenuItem>\n                            <MenuItem value={12} className={classes.menu}>12 - Paid Once a Month</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.switch} >\n                        <InputLabel required shrink htmlFor=\"is-taxable-label\">\n                            Is Taxable?\n                        </InputLabel>\n                        <br />\n                        {this.state.isTaxable ?\n                            <span>\n                                <Switch\n                                    onChange={this.handleChangeSwitchTaxable}\n                                    color=\"secondary\"\n                                    input={<Input name=\"is-taxable\" id=\"is-taxable-label\" />}\n                                    checked\n                                /> {'Yes'}\n                            </span>\n                            :\n                            <span>\n                                <Switch\n                                    disabled={this.state.isEdit === false && true}\n                                    onChange={this.handleChangeSwitchTaxable}\n                                    color=\"secondary\"\n                                    input={<Input name=\"is-taxable\" id=\"is-taxable-label\" />}\n                                />{'No'}\n                            </span>\n                        }\n                    </FormControl>\n                    <br />\n                    <br />\n                    {this.state.isTaxable &&\n                        <>\n                            <h3>Employee Withholding Information</h3>\n                            <TextField required={this.state.isTaxable} defaultValue={this.state.federalAllowances} className={classes.textField} label=\"Federal Allowances\" onChange={this.handleChangeInput('federalAllowances')}></TextField>\n                            <TextField required={this.state.isTaxable} defaultValue={this.state.stateAllowances} className={classes.textField} label=\"State Allowances\" onChange={this.handleChangeInput('stateAllowances')}></TextField>\n                            <FormControl className={classes.selectField}>\n                                <InputLabel required shrink htmlFor=\"marital-status-label\">\n                                    Marital Status\n                                </InputLabel>\n                                <Select\n                                    input={<Input name=\"marital-status\" id=\"marital-status-label\" />}\n                                    disabled={this.state.isEdit === false && true}\n                                    required={this.state.isTaxable}\n                                    value={''}\n                                    onChange={this.handleChangeInput('maritalStatus')}\n                                >\n                                    <MenuItem value='Single'>Single</MenuItem>\n                                    <MenuItem value='Married'>Married</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.switch}>\n                                <InputLabel required shrink htmlFor=\"fica-label\">\n                                    Employer Pays Employees Portion of FICA?\n                                </InputLabel>\n                                <br />\n                                {this.state.employerPaysEmployeesFica ?\n                                    <span>\n                                        <Switch\n                                            checked\n                                            disabled={this.state.isEdit === false && true}\n                                            required={this.state.isTaxable}\n                                            onChange={this.handleChangeSwitchFica}\n                                            input={<Input name=\"fica\" id=\"fica-label\" />}\n                                        /> {'Yes'}\n                                    </span>\n                                    :\n                                    <span>\n                                        <Switch\n                                            disabled={this.state.isEdit === false && true}\n                                            required={this.state.isTaxable}\n                                            onChange={this.handleChangeSwitchFica}\n                                            input={<Input name=\"fica\" id=\"fica-label\" />}\n                                        /> {'No'}\n                                    </span>\n                                }\n                            </FormControl>\n                        </>\n                    }\n                    <br />\n                    <Button\n                        size=\"small\"\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={this.handleClickCancel}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={this.handleClickSave}\n                    >\n                        Save\n                    </Button>\n                </form>\n                {/* <pre>Local State{JSON.stringify(this.state, null, 2)}</pre>\n                <pre>Redux State{JSON.stringify(this.props, null, 2)}</pre> */}\n            </div>\n        )\n    }\n}\n\nAddEmployee.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    user: state.user,\n    business: state.business.businessReducer,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(AddEmployee));\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nexport default function DatePickers(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container} color=\"secondary\" noValidate>\n      <TextField\n        id=\"date\"\n        label={props.customLabel}\n        onChange={props.handleChangeDate}\n        type=\"date\"\n        defaultValue={props.defaultValue}\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n    </div>\n  );\n}\n\n","\n\n\n\n\n\n// need to store employees withholding information in redux state\n// state allowances\n// marital status\nconst stateWithholding = (grossWages, payPeriods, stateAllowances, maritalStatus) => {\n    // STEP 1 - Determine gross wages (450)\n    // STEP 2 - Determine the number of pay periods in the year, multiply step 1 by step 2\n    // 360 if you pay by the day\n    // 52 if you pay by the week (52 * 450 = $23,400)\n    // 26 if you pay every two weeks\n    // 24 if you pay twice a month\n    // 12 if you  pay once a month\n    // STEP 3 - Multiple employee's withholding allowances by $4,250\n    // state allowances (1 * 4,250 = 4,250)\n    // STEP 4 - subtract result in step 3 for the result in step 2\n    // 23,400 - 4,250 = 19,150\n    // STEP 5 - use chart to determine the value for step 5 (need marital status)\n    // IF SINGLE (use result from step 4)\n    // between 2400 and 28920, subtract 2,400, multiple by 5.35%\n    // 19150 - 2400 = 16750\n    // 16750 * 0.0535 = 896.125\n\n    // IF MARRIED\n    // STEP 6 - divide step 5 by the pay periods in step two\n    // 896.125 / 52 = 17.2331730769\n    let value = (grossWages * payPeriods - (stateAllowances * 4250));\n\n    if (maritalStatus === 'Single') {\n        if (value >= 2400 && value < 28920) {\n            value -= 2400;\n            value *= 0.0535;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 28920 && value < 89510) {\n            value -= 28920;\n            value *= 0.0705;\n            value += 1418.82;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 89510 && value < 166290) {\n            value -= 89510;\n            value *= 0.0785;\n            value += 5690.42;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 166290) {\n            value -= 166290;\n            value *= 0.0985;\n            value += 11717.65;\n            value /= payPeriods;\n\n            return value;\n        }\n\n    }\n    else if (maritalStatus === 'Married') {\n        if (value >= 9050 && value < 47820) {\n            value -= 9050;\n            value *= 0.0535;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 47820 && value < 163070) {\n            value -= 47820;\n            value *= 0.0705;\n            value += 2074.20;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 163070 && value < 282200) {\n            value -= 163070;\n            value *= 0.0785;\n            value += 10199.33;\n            value /= payPeriods;\n\n            return value;\n        }\n        else if (value >= 282200) {\n            value -= 282200;\n            value *= 0.0985;\n            value += 19551.04;\n            value /= payPeriods;\n\n            return value;\n        }\n\n    }\n\n}\n\n// total required social security due to federal is 15.3%\n// The employee pays half (7.65% withheld from gross wages) and the employer pays\n// the other half (7.65% additional to gross wages).\n// The employer can opt to pay the employee portion, which would result in the employer\n// paying 15.3% additional to the gross wages and nothing would be withheld form the employees net pay.\n// From each portion of the 7.65%, 6.2% is for social security tax and 1.45% for Medicare tax.\nconst socialSecurityMedicare = (grossWages) => grossWages * 0.0765\n\nconst netPay = (grossWages, stateWithholding, federalWithholding, employeesSocialSecurityMedicare, employerPaysEmployeesFica) => {\n    if (employerPaysEmployeesFica) {\n        return ((grossWages - stateWithholding) - federalWithholding)\n    } else {\n        return (((grossWages - stateWithholding) - federalWithholding) - employeesSocialSecurityMedicare)\n    }\n    \n}\n\nexport default { stateWithholding, socialSecurityMedicare, netPay }","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\n\n// Expansion panel \nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport Divider from '@material-ui/core/Divider';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n\n// From inputs\nimport CurrencyInput from 'react-currency-input';\nimport DatePickers from '../DatePickers/DatePickers';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\n\nimport paymentCalculator from '../NetPayCalculation/NetPayCalculation';\n\nimport './PaymentForm.css';\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    column: {\n        flexBasis: '33.33%',\n    },\n    helper: {\n        borderLeft: `2px solid ${theme.palette.divider}`,\n        padding: `${theme.spacing.unit}px ${theme.spacing(2)}px`,\n    },\n    link: {\n        color: theme.palette.primary.main,\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nclass PaymentFrom extends Component {\n\n    state = {\n        selectedEmployee: {},\n        grossWages: 0, // pass as parameter to stateWithholdingCalculation\n        stateWithholding: 0, // set by return of stateWithholdingCalculation\n        federalWithholding: 0, // need to build function in NetPayCalculation\n        employeesSocialSecurityMedicare: 0,\n        employersSocialSecurityMedicare: 0,\n        netPay: 0,\n        isCash: false,\n        checkNumber: '',\n        periodStart: '',\n        periodEnd: '',\n        paymentDate: '',\n        currentDate: '',\n    }\n\n    componentWillMount() {\n        this.getCurrentDate();\n    }\n\n    handleExpansion = (employee) => {\n        this.setState({\n            ...this.state,\n            selectedEmployee: employee,\n        })\n    }\n\n    // payment changes\n    handleChangeGrossWages = (event) => {\n        this.setState({\n            ...this.state,\n            grossWages: Number(event.target.value.replace(/[^0-9.-]+/g, \"\")),\n        });\n    }\n\n    handleGrossWagesSubmit = () => {\n        if (this.state.selectedEmployee.isTaxable) {\n            this.setState({\n                stateWithholding: paymentCalculator.stateWithholding(\n                    this.state.grossWages,\n                    this.state.selectedEmployee.payPeriodFrequency,\n                    this.state.selectedEmployee.stateAllowances,\n                    this.state.selectedEmployee.maritalStatus\n                ), // end set stateWithholding\n                employeesSocialSecurityMedicare: paymentCalculator.socialSecurityMedicare(\n                    this.state.grossWages,\n                ), // end set employeesSocialSecurityMedicare\n                employersSocialSecurityMedicare: paymentCalculator.socialSecurityMedicare(\n                    this.state.grossWages,\n                ), // end set employersSocialSecurityMedicare\n            },\n                () => {\n                    // calculate the employees net pay\n                    return this.setState({\n                        netPay: paymentCalculator.netPay(\n                            this.state.grossWages,\n                            this.state.stateWithholding,\n                            this.state.federalWithholding,\n                            this.state.employeesSocialSecurityMedicare,\n                            this.state.selectedEmployee.employerPaysEmployeesFica,\n                        )\n                    });\n                }\n            );\n        } else {\n            this.setState({\n                netPay: this.state.grossWages,\n            })\n        }\n    }\n\n    // switch between cash and check payment\n    handleChangeSwitchCash = () => {\n        this.setState({\n            isCash: !this.state.isCash,\n        });\n    }\n\n    handleChangeCheckNumberInput = (event) => {\n        this.setState({\n            checkNumber: event.target.value,\n        });\n    }\n\n    handleClickPay = () => {\n        console.log(this.state);\n        // dispatch to payment saga\n        this.props.dispatch({ type: 'POST_PAYMENT_RECORD', payload: this.state });\n        this.handleClickCancel(); // clears state and input values\n        Swal.fire({\n            type: 'success',\n            title: 'Payment Recorded!',\n        });\n    }\n\n    handleClickCancel = () => {\n        this.setState({\n            ...this.state,\n            grossWages: 0, // pass as parameter to stateWithholdingCalculation\n            stateWithholding: 0, // set by return of stateWithholdingCalculation\n            federalWithholding: 0, // need to build function in NetPayCalculation\n            employeesSocialSecurityMedicare: 0,\n            employersSocialSecurityMedicare: 0,\n            netPay: 0,\n            isCash: false,\n            checkNumber: '',\n            periodStart: '',\n            periodEnd: '',\n            paymentDate: '',\n            currentDate: '',\n        });\n    }\n\n    // set the current date\n    getCurrentDate = () => {\n        let today = new Date();\n        let dd = String(today.getDate()).padStart(2, '0');\n        let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        let yyyy = today.getFullYear();\n        today = yyyy + '-' + mm + '-' + dd;\n\n        this.setState({\n            ...this.state,\n            currentDate: today,\n        })\n    }\n\n    handleChangeDate = (property) => (event) => {\n        this.setState({\n            ...this.state,\n            [property]: event.target.value,\n        });\n    }\n\n    render() {\n        const eachEmployee = this.props.eachEmployee;\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <ExpansionPanel onChange={() => this.handleExpansion(eachEmployee)}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1c-content\"\n                        id=\"panel1c-header\"\n                    >\n                        <div className={classes.column}>\n                            <Typography className={classes.heading}>{eachEmployee.firstName + \" \" + eachEmployee.lastName}</Typography>\n                        </div>\n\n                        <div className={classes.column}>\n                            <Typography className={classes.secondaryHeading}>{eachEmployee.isTaxable && 'Taxable' || 'Non-Taxable'}</Typography>\n                        </div>\n                    </ExpansionPanelSummary>\n                    <Divider />\n                    <ExpansionPanelDetails className={classes.details}>\n                        <div className={classes.column}>\n                            <form\n                                className=\"gross-wage-form\"\n                                onSubmit={this.handleGrossWagesSubmit}>\n                                <label>\n                                    Gross Wage\n                                <br />\n                                    {/* <input> */}\n                                    <CurrencyInput\n                                        id=\"required-field\"\n                                        thousandSeparator=\",\"\n                                        decimalSeparator=\".\"\n                                        precision=\"2\"\n                                        prefix=\"$\"\n                                        allowNegative={false}\n                                        allowEmpty={false}\n                                        value={this.state.grossWages}\n                                        onChangeEvent={this.handleChangeGrossWages}\n                                    />\n                                    {/* </input>     */}\n                                </label>\n                                <Button\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    color=\"secondary\"\n                                    onClick={this.handleGrossWagesSubmit}>\n                                        Calculate Net\n                                </Button>\n                            </form>\n                            <br />\n                            <label>\n                                Net Pay: {this.state.netPay > 0 ?\n                                    '$' + this.state.netPay.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') :\n                                    '$0.00'}\n                            </label>\n                            <br />\n                            <label>\n                                <Switch onChange={this.handleChangeSwitchCash} />\n                                {this.state.isCash && 'Cash' || 'Check'}\n                            </label>\n\n                            <br />\n                            <label>\n                                <input\n                                    disabled={this.state.isCash && true || false}\n                                    className={this.state.isCash && \"cash-payment\" || \"check-payment\"}\n                                    placeholder=\"Check #\"\n                                    value={this.state.checkNumber}\n                                    onChange={this.handleChangeCheckNumberInput}\n                                >\n                                </input>\n                            </label>\n                            <br />\n                            <label>\n                                <br />\n                                <div>\n                                    <DatePickers defaultValue={this.state.periodStart} handleChangeDate={this.handleChangeDate('periodStart')} customLabel=\"Period Start\" />\n                                </div>\n                                <br />\n                                <div>\n                                    <DatePickers defaultValue={this.state.periodEnd} handleChangeDate={this.handleChangeDate('periodEnd')} customLabel=\"Period End\" />\n                                </div>\n                                <br />\n                                <div>\n                                    {/* <DatePickers getCurrentDate=\"2019-07-04\" customLabel=\"Payment Date\" /> */}\n                                    <DatePickers defaultValue={this.state.currentDate} handleChangeDate={this.handleChangeDate('paymentDate')} customLabel=\"Payment Date\" />\n\n                                </div>\n                                <br />\n                            </label>\n                        </div>\n                        {/* <div className={classNames({classes.column, classes.helper})}> */}\n                        <div white-space=\"pre\" className={classes.helper}>\n                            <h3>Withholding</h3>\n                            <h4>State: ${this.state.stateWithholding !== 0 && this.state.stateWithholding.toFixed(2) || 0.00}</h4>\n                            <h4>Federal: ${this.state.federalWithholding !== 0 && this.state.federalWithholding.toFixed(2) || 0.00 }</h4>\n                            <h4>Employee FICA: ${this.state.employeesSocialSecurityMedicare !== 0 && this.state.employeesSocialSecurityMedicare.toFixed(2) || 0.00}</h4>\n                            <h4>Employer FICA: ${this.state.employersSocialSecurityMedicare !== 0 && this.state.employersSocialSecurityMedicare.toFixed(2) || 0.00}</h4>\n                        </div>\n                    </ExpansionPanelDetails>\n                    <ExpansionPanelActions>\n                        <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={this.handleClickCancel}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"secondary\"\n                            onClick={this.handleClickPay}\n                        >\n                            Pay\n                        </Button>\n                    </ExpansionPanelActions>\n                    {/* <pre>\n                        Props {JSON.stringify(this.props, null, 2)}\n                    </pre>\n                    <pre>\n                        Local State {JSON.stringify(this.state, null, 2)}\n                    </pre> */}\n                </ExpansionPanel>\n            </div>\n\n\n        )\n    }\n}\n\nPaymentFrom.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect()(withStyles(styles)(PaymentFrom));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        height: 300,\n    },\n    // control: {\n    //     padding: theme.spacing.unit * 2,\n    // },\n  });\n\nfunction Dashboard(props) {\n  const { classes } = props;\n\n  return (\n    <div>\n       <Grid container className={classes.root} spacing={6}>\n            <Grid item xs={6}>\n                <Paper className={classes.paper} elevation={1}>\n                    <Typography variant=\"h5\" component=\"h3\">\n                    Year-To-Date Withholdings\n                    </Typography>\n                    <Typography component=\"p\">\n                    Federal:\n                    </Typography>\n                    <Typography component=\"p\">\n                    State:\n                    </Typography>\n                    <Typography component=\"p\">\n                    Social Security and Medicare:\n                    </Typography>\n                </Paper>\n            </Grid>\n            <Grid item xs={6}>\n                <Paper className={classes.paper} elevation={1}>\n                    <Typography variant=\"h5\" component=\"h3\">\n                    Year-To-Date Cost of Service\n                    </Typography>\n                    <Typography component=\"p\">\n                    Wages Paid:\n                    </Typography>\n                    <Typography component=\"p\">\n                    Social Security and Medicare:\n                    </Typography>\n                    <Typography component=\"p\">\n                    Minnesota Unemployment Insurance:\n                    </Typography>\n                    <Typography component=\"p\">\n                    Workers Compensation Insurance:\n                    </Typography>\n                </Paper>\n            </Grid>\n        </Grid> \n        <pre>\n            {JSON.stringify(props, null, 2)}\n        </pre>\n      \n    </div>\n  );\n}\n\nDashboard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect()(withStyles(styles)(Dashboard));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './HomePage.css';\n\n// Material-UI\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Button from '@material-ui/core/Button';\n\nimport PaymentFrom from '../PaymentForm/PaymentForm';\nimport Dashboard from '../Dashboard/Dashboard';\n\n// Styles\nconst styles = theme => ({\n  // container: {\n  //     display: 'flex',\n  //     flexWrap: 'wrap',\n  // },\n  // textField: {\n  //     marginLeft: theme.spacing.unit,\n  //     marginRight: theme.spacing.unit,\n  //     width: 200,\n  // },\n  // selectField: {\n  //   marginLeft: theme.spacing.unit,\n  //   marginRight: theme.spacing.unit,\n  //   marginBottom: theme.spacing.unit,\n  //   width: 200,\n  // },\n  formControl: {\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    marginBottom: theme.spacing(),\n    margin: theme.spacing(),\n    minWidth: 200,\n  },\n  // dense: {\n  //     marginTop: 19,\n  // },\n  // menu: {\n  //     width: 200,\n  // },\n});\n\nclass HomePage extends Component {\n\n  state = {\n    // businessName: (this.props.singleBusiness.businessName && this.props.singleBusiness.businessName),\n    businessName: '',\n    labelWidth: 0,\n\n  }\n\n  // when components mounts, fetch all the business for the current user id\n  componentDidMount() {\n    // fetch businesses for the new user\n    this.props.dispatch({ type: 'FETCH_BUSINESSES', payload: this.props.user.id });\n    // this.props.dispatch({ type: 'FETCH_BUSINESSES', payload: this.props.user.id }, () => {this.setState({businessName: (this.props.singleBusiness.businessName && this.props.singleBusiness.businessName)})});\n    this.setState({\n      labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n  }\n\n  // when user selects a business from the drop down menu, set that business in singleBusiness reducer\n  handleChangeInput = (event) => {\n    // Payload is a single business object\n    this.props.dispatch({ type: 'FETCH_SINGLE_BUSINESS', payload: event.target.value });\n    this.setState({\n      businessName: event.target.value.businessName,\n    })\n  }\n\n  handleAddBusiness = () => {\n    this.props.history.push('/register/business');\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div id=\"home-page\">\n        {/* <div id=\"welcome-container\">\n          <div id=\"welcome\">\n            <strong>Welcome, {this.props.user.username}! </strong>\n          </div>\n          <LogOutButton className=\"log-in\" />\n        </div > */}\n        <div id=\"business-select-container\">\n          <div id=\"select-business\">\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel\n                ref={ref => {\n                  this.InputLabelRef = ref;\n                }}\n                htmlFor=\"outlined-business-name\"\n              >Select Business</InputLabel>\n              <Select\n                value={this.state.businessName}\n                onChange={this.handleChangeInput}\n                autoWidth\n                input={\n                  <OutlinedInput\n                    labelWidth={this.state.labelWidth}\n                    name=\"business-name\"\n                    id=\"outlined-business-name\"\n                  />}\n              >\n                <MenuItem value=\"\"><em>None</em></MenuItem>\n                {this.props.business.length !== 0 &&\n                  this.props.business.map(eachBusiness => {\n                    return <MenuItem\n                      key={eachBusiness.id}\n                      value={eachBusiness}\n                    >\n                      {eachBusiness.businessName}\n                    </MenuItem>\n                  })}\n              </Select>\n            </FormControl>\n            <br />\n            <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"secondary\"\n                onClick={this.handleAddBusiness}>\n                  Add Business\n              </Button>\n            {/* ADD DELETE HERE */}\n            <div id=\"business-title\">\n              <h2>{this.state.businessName}</h2>\n            </div>\n          </div>\n        </div>\n        <br />\n        {/* <Dashboard /> */}\n        <br />\n        <div id=\"employees-container\">\n          <h2>Record Wages</h2>\n          {this.props.employees.length !== 0 &&\n            this.props.employees.map(eachEmployee => {\n              if (eachEmployee.business_id === this.props.singleBusiness.id) {\n                return <PaymentFrom key={eachEmployee.employee_id} eachEmployee={eachEmployee} />\n              }\n            })\n          }\n        </div>\n        {/* <pre>\n          Local State{JSON.stringify(this.state, null, 2)}\n        </pre>\n        <pre>\n          Redux State{JSON.stringify(this.props.state, null, 2)}\n        </pre> */}\n      </div>\n    )\n  }\n}\n\nHomePage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({user});\nconst mapStateToProps = state => ({\n  user: state.user,\n  business: state.business.businessReducer,\n  singleBusiness: state.business.singleBusiness,\n  employees: state.employees.employeesReducer,\n  state,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(withStyles(styles)(HomePage));\n","\n// React\nimport React, { Component } from 'react';\nimport Swal from 'sweetalert2';\nimport './EmployeeInformation.css';\n\n// Material-UI\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Function that checks for empty strings or null values\n// Accepts an array of values\n// Returns true if all fields are not empty\n// Returns false if any fields are empty\nimport checkRequiredFields from '../CheckRequiredFields/CheckRequiredFields';\n\n// Styles\nconst styles = theme => ({\n    container: {\n        // display: 'flex',\n        // flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    selectField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    switch: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        marginBottom: theme.spacing(2),\n        width: 200,\n    },\n    dense: {\n        marginTop: 19,\n    },\n    menu: {\n        width: 200,\n    },\n});\n\nclass EmployeeInformation extends Component {\n\n    state = {\n        employee: {\n            employee_id: this.props.eachEmployee.employee_id,\n            business_id: this.props.eachEmployee.business_id,\n            firstName: this.props.eachEmployee.firstName, // employee table, not null\n            lastName: this.props.eachEmployee.lastName, // employee table, not null\n            streetAddress: this.props.eachEmployee.streetAddress, // address table\n            city: this.props.eachEmployee.city, // address table\n            state: this.props.eachEmployee.state, // address table\n            zipCode: this.props.eachEmployee.zipCode, // address table\n            mobilePhone: this.props.eachEmployee.mobilePhone, // contact table, not null\n            alternatePhone: this.props.eachEmployee.alternatePhone, // contact table\n            emailAddress: this.props.eachEmployee.emailAddress, // contact table, not null\n            businessName: this.props.eachEmployee.businessName, // select current business id from redux state, insert into the employee_business table\n            payPeriodFrequency: this.props.eachEmployee.payPeriodFrequency, // employee_business table, not null\n            isTaxable: this.props.eachEmployee.isTaxable, // employee_business table, not null\n            federalAllowances: this.props.eachEmployee.federalAllowances, // withholding table, not null\n            stateAllowances: this.props.eachEmployee.stateAllowances, // withholding table, not null\n            maritalStatus: this.props.eachEmployee.maritalStatus, // withholding table, not null (select with options)\n            employerPaysEmployeesFica: this.props.eachEmployee.employerPaysEmployeesFica, // withholding table, not null\n\n        },\n        isEdit: false,\n    }\n\n    handleClickEdit = () => {\n        this.setState({\n            isEdit: true,\n        })\n    }\n    handleChangeInput = (propertyName) => (event) => {\n        this.setState({\n            employee: {\n                ...this.state.employee,\n                [propertyName]: event.target.value,\n            }\n        });\n    }\n\n    handleChangeSwitchTaxable = () => {\n        // if condition is true, set isTaxable to false and the employerPaysEmployeeFica to false\n        // else, only set the isTaxable to the opposite value of its current value\n        if (this.state.employee.isTaxable) {\n            this.setState({\n                employee: {\n                    ...this.state.employee,\n                    isTaxable: !this.state.employee.isTaxable,\n                    employerPaysEmployeesFica: false,  // when isTaxable is toggled off, set back to original state\n                    federalAllowances: 0, // when isTaxable is toggled off, set back to original state\n                    stateAllowances: 0,  // when isTaxable is toggled off, set back to original state\n                    maritalStatus: null,  // when isTaxable is toggled off, set back to original state\n                }\n            });\n        } else {\n            this.setState({\n                employee: {\n                    ...this.state.employee,\n                    isTaxable: !this.state.employee.isTaxable,\n                }\n            });\n        }\n    }\n\n    handleChangeSwitchFica = () => {\n        this.setState({\n            employee: {\n                ...this.state.employee,\n                employerPaysEmployeesFica: !this.state.employee.employerPaysEmployeesFica,\n            }\n        });\n    }\n\n    // skip adding employee and go to home\n    handleClickCancel = () => {\n        console.log('cancel changes');\n        this.setState({\n            employee: {\n                employee_id: this.props.eachEmployee.employee_id,\n                business_id: this.props.eachEmployee.business_id,\n                firstName: this.props.eachEmployee.firstName, // employee table, not null\n                lastName: this.props.eachEmployee.lastName, // employee table, not null\n                streetAddress: this.props.eachEmployee.streetAddress, // address table\n                city: this.props.eachEmployee.city, // address table\n                state: this.props.eachEmployee.state, // address table\n                zipCode: this.props.eachEmployee.zipCode, // address table\n                mobilePhone: this.props.eachEmployee.mobilePhone, // contact table, not null\n                alternatePhone: this.props.eachEmployee.alternatePhone, // contact table\n                emailAddress: this.props.eachEmployee.emailAddress, // contact table, not null\n                businessName: this.props.eachEmployee.businessName, // select current business id from redux state, insert into the employee_business table\n                payPeriodFrequency: this.props.eachEmployee.payPeriodFrequency, // employee_business table, not null\n                isTaxable: this.props.eachEmployee.isTaxable, // employee_business table, not null\n                federalAllowances: this.props.eachEmployee.federalAllowances, // withholding table, not null\n                stateAllowances: this.props.eachEmployee.stateAllowances, // withholding table, not null\n                maritalStatus: this.props.eachEmployee.maritalStatus, // withholding table, not null (select with options)\n                employerPaysEmployeesFica: this.props.eachEmployee.employerPaysEmployeesFica, // withholding table, not null\n            },\n            isEdit: false,\n        });\n        // this.props.history.push('/home');\n    }\n\n    handleClickSave = () => {\n        // if (this.state.employee.isTaxable) {\n        if (checkRequiredFields([\n            this.state.employee.firstName,\n            this.state.employee.lastName,\n            this.state.employee.mobilePhone,\n            this.state.employee.emailAddress,\n            this.state.employee.assignedBusiness,\n            this.state.employee.payPeriodFrequency,\n            this.state.employee.federalAllowances,\n            this.state.employee.stateAllowances,\n            // this.state.employee.maritalStatus,\n        ])) {\n            // will send all fields to saga\n            this.props.dispatch({ type: 'UPDATE_EMPLOYEE', payload: { ...this.state.employee, userId: this.props.user.id } });\n            this.setState({ isEdit: false });\n            // this.props.history.push('/home');\n\n        } else {\n            alert('Please complete all required fields OR select \"Skip\" to cancel adding an employee!');\n        }\n        Swal.fire({\n            type: 'success',\n            title: 'Employee Updated!',\n        });\n    }\n\n    // action.payload is the employee_business id\n    handleClickDelete = (event) => {\n        this.props.dispatch({type: `DELETE_EMPLOYEE`, payload: event});\n        Swal.fire({\n            type: 'success',\n            title: 'Employee Deleted!',\n        });\n        \n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                {/* <form className=\"register-employee-form\"> */}\n                <form className=\"payment-form\">\n                    <div>\n                        <Grid container spacing={6}>\n                            <Grid item xs={6}>\n                                <Button\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    color=\"secondary\"\n                                    onClick={this.handleClickEdit}\n                                >\n                                    Edit\n                                </Button>\n                            </Grid>\n                            <Grid item xs ={6}>\n                                <Button\n                                    // value={this.props.eachEmployee.employeeBusinessID}\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    onClick={() => {this.handleClickDelete(this.props.eachEmployee.employeeBusinessID)}}\n                                >\n                                    Delete\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </div>\n                    <h3>Employee Name</h3>\n                    <h4><em>Business / Service: {this.state.employee.businessName}</em></h4>\n                    <br />\n                    <TextField disabled={this.state.isEdit === false && true} required defaultValue={this.state.employee.firstName} className={classes.textField} label=\"First Name\" onChange={this.handleChangeInput('firstName')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} required defaultValue={this.state.employee.lastName} className={classes.textField} label=\"Last Name\" onChange={this.handleChangeInput('lastName')}></TextField>\n                    <h3>Mailing Address</h3>\n                    <TextField disabled={this.state.isEdit === false && true} defaultValue={this.state.employee.streetAddress} className={classes.textField} label=\"Street Address\" onChange={this.handleChangeInput('streetAddress')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} defaultValue={this.state.employee.city} className={classes.textField} label=\"City\" onChange={this.handleChangeInput('city')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} defaultValue={this.state.employee.state} className={classes.textField} label=\"State\" onChange={this.handleChangeInput('state')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} defaultValue={this.state.zipCode} className={classes.textField} label=\"Zip Code\" onChange={this.handleChangeInput('zipCode')}></TextField>\n                    <h3>Contact Information</h3>\n                    <TextField disabled={this.state.isEdit === false && true} required defaultValue={this.state.employee.mobilePhone} className={classes.textField} label=\"Mobile Phone\" onChange={this.handleChangeInput('mobilePhone')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} defaultValue={this.state.employee.alternatePhone} className={classes.textField} label=\"Alternate Phone\" onChange={this.handleChangeInput('alternatePhone')}></TextField>\n                    <TextField disabled={this.state.isEdit === false && true} required defaultValue={this.state.employee.emailAddress} className={classes.textField} label=\"Email Address\" onChange={this.handleChangeInput('emailAddress')}></TextField>\n                    <br />\n                    <h3>Employment Information</h3>\n                    {/* <FormControl className={classes.selectField}>\n                        <InputLabel required shrink htmlFor=\"business-service-label\">\n                            Business / Service\n                        </InputLabel>\n                        <Select\n                            disabled={this.state.isEdit === false && true}\n                            input={<Input name=\"business-service\" id=\"business-service-label\" />}\n                            value={this.state.employee.assignedBusiness}\n                            onChange={this.handleChangeInput('assignedBusiness')}\n                            name={\"business-service\"}\n                        >\n                            {this.props.business.length !== 0 &&\n                                this.props.business.map(eachBusiness => {\n                                    return <MenuItem\n                                        key={eachBusiness.id}\n                                        value={eachBusiness.id}\n                                        className={classes.menu}\n                                    >\n                                        {eachBusiness.businessName}\n                                    </MenuItem>\n                                })}\n                        </Select>\n                    </FormControl > */}\n                    <FormControl className={classes.selectField}>\n                        <InputLabel required shrink htmlFor=\"pay-period-frequency-label\">\n                            Pay Period Frequency\n                        </InputLabel>\n                        <Select\n                            disabled={this.state.isEdit === false && true}\n                            input={<Input name=\"pay-period-frequency\" id=\"pay-period-frequency-label\" />}\n                            value={this.state.employee.payPeriodFrequency}\n                            onChange={this.handleChangeInput('payPeriodFrequency')}\n                            name=\"pay-period-frequency\"\n                        >\n                            <MenuItem value={360} className={classes.menu}>360 - Paid Daily</MenuItem>\n                            <MenuItem value={52} className={classes.menu}>52 - Paid Weekly</MenuItem>\n                            <MenuItem value={26} className={classes.menu}>26 - Paid Every Two Weeks</MenuItem>\n                            <MenuItem value={24} className={classes.menu}>24 - Paid Twice a Month</MenuItem>\n                            <MenuItem value={12} className={classes.menu}>12 - Paid Once a Month</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.switch} >\n                        <InputLabel required shrink htmlFor=\"is-taxable-label\">\n                            Is Taxable?\n                        </InputLabel>\n                        <br />\n                        {this.state.employee.isTaxable ?\n                            <span>\n                                <Switch\n                                    disabled={this.state.isEdit === false && true}\n                                    onChange={this.handleChangeSwitchTaxable}\n                                    color=\"secondary\"\n                                    input={<Input name=\"is-taxable\" id=\"is-taxable-label\" />}\n                                    checked\n                                /> {'Yes'}\n                            </span>\n                            :\n                            <span>\n                                <Switch\n                                    disabled={this.state.isEdit === false && true}\n                                    onChange={this.handleChangeSwitchTaxable}\n                                    color=\"secondary\"\n                                    input={<Input name=\"is-taxable\" id=\"is-taxable-label\" />}\n                                />{'No'}\n                            </span>\n                        }\n                    </FormControl>\n                    <br />\n                    <br />\n                    {this.state.employee.isTaxable &&\n                        <>\n                            <h3>Employee Withholding Information</h3>\n                            <TextField disabled={this.state.isEdit === false && true} required={this.state.employee.isTaxable} defaultValue={this.state.employee.federalAllowances} className={classes.textField} label=\"Federal Allowances\" onChange={this.handleChangeInput('federalAllowances')}></TextField>\n                            <TextField disabled={this.state.isEdit === false && true} required={this.state.employee.isTaxable} defaultValue={this.state.employee.stateAllowances} className={classes.textField} label=\"State Allowances\" onChange={this.handleChangeInput('stateAllowances')}></TextField>\n                            <FormControl className={classes.selectField}>\n                                <InputLabel required shrink htmlFor=\"marital-status-label\">\n                                    Marital Status\n                                </InputLabel>\n                                <Select\n                                    input={<Input name=\"marital-status\" id=\"marital-status-label\" />}\n                                    disabled={this.state.isEdit === false && true}\n                                    required={this.state.employee.isTaxable}\n                                    value={''}\n                                    onChange={this.handleChangeInput('maritalStatus')}\n                                >\n                                    <MenuItem value='Single'>Single</MenuItem>\n                                    <MenuItem value='Married'>Married</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.switch}>\n                                <InputLabel required shrink htmlFor=\"fica-label\">\n                                    Employer Pays Employees Portion of FICA?\n                                </InputLabel>\n                                <br />\n                                {this.state.employee.employerPaysEmployeesFica ?\n                                    <span>\n                                        <Switch\n                                            checked\n                                            disabled={this.state.isEdit === false && true}\n                                            required={this.state.employee.isTaxable}\n                                            onChange={this.handleChangeSwitchFica}\n                                            input={<Input name=\"fica\" id=\"fica-label\" />}\n                                        /> {'Yes'}\n                                    </span>\n                                    :\n                                    <span>\n                                        <Switch\n                                            disabled={this.state.isEdit === false && true}\n                                            required={this.state.employee.isTaxable}\n                                            onChange={this.handleChangeSwitchFica}\n                                            input={<Input name=\"fica\" id=\"fica-label\" />}\n                                        /> {'No'}\n                                    </span>\n                                }\n                            </FormControl>\n                        </>\n                    }\n                    <br />\n                    <Button\n                        size=\"small\"\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={this.handleClickCancel}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={this.handleClickSave}\n                    >\n                        Save\n                    </Button>\n                </form>\n                {/* <pre>Local State{JSON.stringify(this.state, null, 2)}</pre>\n                <pre>Redux State{JSON.stringify(this.props, null, 2)}</pre> */}\n            </div>\n        )\n    }\n}\n\nEmployeeInformation.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    user: state.user,\n    business: state.business.businessReducer,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(EmployeeInformation));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './EmployeesPage.css';\n\n// Material-UI\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\n\nimport Button from '@material-ui/core/Button';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport EmployeeInformation from '../EmployeeInformation/EmployeeInformation';\nimport AddEmployee from '../AddEmployee/AddEmployee';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing(50),\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n    outline: 'none',\n  },\n});\n\n\nclass EmployeesPage extends Component {\n  \n  state = {\n    addEmployee: false,\n  }\n\n  handleClickAddEmployee = () => {\n    console.log('new taco');\n    // this.setState({\n    //   addEmployee: true,\n    // });\n    this.props.history.push('/register/employee/')\n  }\n\n  handleSaveEmployee = () => {\n    console.log('save taco');\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    \n\n    return (\n      <div id=\"employees-page\">\n        <div id=\"employees-container\">\n          <h2>Your Employees</h2>\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            color=\"primary\"\n            onClick={this.handleClickAddEmployee}\n          >\n            Add Employee\n          </Button>\n          {/* <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.state.addEmployee}\n          onClose={this.handleSaveEmployee}\n        >\n          <div style={getModalStyle()} className={classes.paper}>\n            <AddEmployee />\n          </div>\n            <AddEmployee />\n        </Modal> */}\n\n          {this.props.employees.length !== 0 &&\n            this.props.employees.map(eachEmployee => {\n              if (eachEmployee.business_id === this.props.singleBusiness.id) {\n                return <ExpansionPanel\n                  className=\"each-employee\"\n                  key={eachEmployee.employee_id}\n                  value={eachEmployee.employee_id}\n                >\n                  <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <div className=\"each-employee-title\">\n                      <div>\n                        <h3>{eachEmployee.firstName} {eachEmployee.lastName}</h3>\n                      </div>\n                    </div>\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails className=\"each-employee-details\">\n                    <div className=\"each-employee-button-container\">\n                      {/* <Edit className=\"employee-edit-icon\" /><br />\n                      <div>\n                        <Button variant=\"contained\" color=\"secondary\">Edit</Button>\n                      </div>\n                      <br />\n                      <div>\n                        <Button variant=\"outlined\" color=\"primary\">Delete</Button>\n                      </div>\n                      <br /> */}\n                      <EmployeeInformation eachEmployee={eachEmployee} />\n\n                    </div>\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n              }\n            })\n          }\n        </div>\n        {/* <pre>\n          {JSON.stringify(this.props.state, null, 2)}\n        </pre> */}\n      </div>\n    )\n  }\n}\n\nEmployeesPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({user});\nconst mapStateToProps = state => ({\n  user: state.user,\n  singleBusiness: state.business.singleBusiness,\n  employees: state.employees.employeesReducer,\n  state,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(withStyles(styles)(EmployeesPage));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Home from \"@material-ui/icons/Home\";\nimport People from \"@material-ui/icons/People\";\nimport ExitToApp from \"@material-ui/icons/ExitToApp\";\nimport { Link } from \"react-router-dom\";\n\nimport smallLogo from \"./small-logo.png\";\n\nimport \"./NavDrawer.css\";\nimport { inherits } from \"util\";\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 36\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\"\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing.unit * 7 + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing.unit * 9 + 1\n    }\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing.unit * 3\n  },\n  navLogo: {\n    height: 70\n  }\n});\n\nclass NavDrawer extends Component {\n  state = {\n    open: false\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  // handleClickHome = () => {\n\n  // };\n\n  render() {\n    const { classes, theme } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          color=\"error\"\n          position=\"fixed\"\n          className={classNames(classes.appBar, {\n            [classes.appBarShift]: this.state.open\n          })}\n        >\n          <Toolbar disableGutters={!this.state.open}>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"Open drawer\"\n              onClick={this.handleDrawerOpen}\n              className={classNames(classes.menuButton, {\n                [classes.hide]: this.state.open\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Link className=\"home-nav-link\" to=\"/home\">\n              <img\n                className={classes.navLogo}\n                src={smallLogo}\n                alt=\"PayTracks\"\n              />\n            </Link>\n            {/* <Typography className={classes.welcome} color=\"inherit\">Welcome, {this.props.user.username}! <strong>|</strong> </Typography> */}\n            {/* <Link>\n                            <Typography color=\"inherit\">Log Out</Typography>\n                        </Link> */}\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={classNames(classes.drawer, {\n            [classes.drawerOpen]: this.state.open,\n            [classes.drawerClose]: !this.state.open\n          })}\n          classes={{\n            paper: classNames({\n              [classes.drawerOpen]: this.state.open,\n              [classes.drawerClose]: !this.state.open\n            })\n          }}\n          open={this.state.open}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={this.handleDrawerClose}>\n              {theme.direction === \"rtl\" ? (\n                <ChevronRightIcon />\n              ) : (\n                <ChevronLeftIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <Link className=\"nav-link\" to=\"/home\">\n              <ListItem button>\n                <ListItemIcon>{<Home />}</ListItemIcon>\n                <ListItemText primary=\"Home\" />\n              </ListItem>\n            </Link>\n            <Link className=\"nav-link\" to=\"/my/employees\">\n              <ListItem button>\n                <ListItemIcon>{<People />}</ListItemIcon>\n                <ListItemText primary=\"Employees\" />\n              </ListItem>\n            </Link>\n            <Link className=\"nav-link\" to=\"/home\">\n              <ListItem\n                button\n                onClick={() => this.props.dispatch({ type: \"LOGOUT\" })}\n              >\n                <ListItemIcon>{<ExitToApp />}</ListItemIcon>\n                <ListItemText primary=\"Log Out\" />\n              </ListItem>\n            </Link>\n          </List>\n          {/* <Divider />\n                    <List>\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n                            <ListItem button key={text}>\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                                <ListItemText primary={text} />\n                            </ListItem>\n                        ))}\n                    </List> */}\n        </Drawer>\n        {/* <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <Typography paragraph>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n                        incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non enim praesent\n                        elementum facilisis leo vel. Risus at ultrices mi tempus imperdiet. Semper risus in\n                        hendrerit gravida rutrum quisque non tellus. Convallis convallis tellus id interdum\n                        velit laoreet id donec ultrices. Odio morbi quis commodo odio aenean sed adipiscing.\n                        Amet nisl suscipit adipiscing bibendum est ultricies integer quis. Cursus euismod quis\n                        viverra nibh cras. Metus vulputate eu scelerisque felis imperdiet proin fermentum leo.\n                        Mauris commodo quis imperdiet massa tincidunt. Cras tincidunt lobortis feugiat vivamus\n                        at augue. At augue eget arcu dictum varius duis at consectetur lorem. Velit sed\n                        ullamcorper morbi tincidunt. Lorem donec massa sapien faucibus et molestie ac.\n                    </Typography>\n                    <Typography paragraph>\n                        Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\n                        facilisi etiam dignissim diam. Pulvinar elementum integer enim neque volutpat ac\n                        tincidunt. Ornare suspendisse sed nisi lacus sed viverra tellus. Purus sit amet volutpat\n                        consequat mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis risus\n                        sed vulputate odio. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in.\n                        In hendrerit gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem\n                        et tortor. Habitant morbi tristique senectus et. Adipiscing elit duis tristique\n                        sollicitudin nibh sit. Ornare aenean euismod elementum nisi quis eleifend. Commodo\n                        viverra maecenas accumsan lacus vel facilisis. Nulla posuere sollicitudin aliquam\n                        ultrices sagittis orci a.\n          </Typography>\n                </main> */}\n      </div>\n    );\n  }\n}\n\nNavDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  business: state.business.businessReducer,\n  singleBusiness: state.business.singleBusiness,\n  employees: state.employees.employeesReducer,\n  state\n});\n\nexport default connect(mapStateToProps)(\n  withStyles(styles, { withTheme: true })(NavDrawer)\n);\n","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport AddBusiness from '../AddBusiness/AddBusiness';\nimport AddEmployee from '../AddEmployee/AddEmployee';\nimport HomePage from '../HomePage/HomePage';\nimport EmployeesPage from '../EmployeesPage/EmployeesPage';\nimport EmployeeInformation from '../EmployeeInformation/EmployeeInformation';\nimport NavDrawer from '../NavDrawer/NavDrawer';\n\nimport './App.css';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#424848',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#C47318',\n      // dark: will be calculated from palette.secondary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    error: {\n      main: '#E9E7DE',\n    },\n  },\n});\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USER' });\n  }\n\n  render() {\n    return (\n        <div>\n        <MuiThemeProvider theme={theme}>\n          <Router>\n            {/* <Nav /> */}\n            {this.props.user.id && <NavDrawer />}\n            <Switch>\n              {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n              <Redirect exact from=\"/\" to=\"/home\" />\n              {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n              <Route\n                exact\n                path=\"/about\"\n                component={AboutPage}\n              />\n              {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n              <ProtectedRoute\n                exact\n                path=\"/home\"\n                component={HomePage}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/register/business\"\n                component={AddBusiness}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/register/employee/\"\n                component={AddEmployee}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/register/employee/details\"\n                component={EmployeeInformation}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/my/employees\"\n                component={EmployeesPage}\n              />\n\n              {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n              <ProtectedRoute\n                exact\n                path=\"/info\"\n                component={InfoPage}\n              />\n              {/* If none of the other routes matched, we will show a 404. */}\n\n\n              <Route render={() => <h1>404</h1>} />\n            </Switch>\n          </Router>\n        </MuiThemeProvider>\n        {/* <pre>\n          {JSON.stringify(this.props.loginMode, null, 2)}\n        </pre> */}\n        </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loginMode: state.loginMode,\n    user: state.user,\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}